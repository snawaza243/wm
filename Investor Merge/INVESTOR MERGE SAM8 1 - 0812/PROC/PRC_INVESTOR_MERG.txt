CREATE OR REPLACE PROCEDURE WEALTHMAKER.PRC_INVESTOR_MERGE (  
    P_MAIN_CODE      VARCHAR2,
    P_TO_MERGE_CODE  VARCHAR2,
    P_LOGIN_ID       VARCHAR2,            
    P_ERRORMESSAGE   OUT VARCHAR2,
    P_SUCCESS         OUT VARCHAR2
    
    )
AS
    MYCLIENTCODE VARCHAR2(100) := NULL;
    MYMAINCODE VARCHAR2(100) := NULL;
    MYNEWCLIENTCODE VARCHAR2(100) := NULL;
    MYNEWMAINCODE VARCHAR2(100) := NULL;

BEGIN
    P_ERRORMESSAGE := NULL;
       
        BEGIN
            FOR MAIN IN(SELECT * FROM WEALTHMAKER.INVESTOR_MASTER WHERE INV_CODE=P_MAIN_CODE)
            LOOP
                FOR MERGED IN  (SELECT * FROM WEALTHMAKER.INVESTOR_MASTER WHERE INV_CODE IN(SELECT * FROM TABLE(ANKIT_SPLIT(P_TO_MERGE_CODE,'#')))) 
                LOOP
                  BEGIN
                    UPDATE WEALTHMAKER.TRANSACTION_ST  SET CLIENT_CODE=P_MAIN_CODE,SOURCE_CODE=SUBSTR(P_MAIN_CODE,0,8),MODIFY_TALISMA=SYSDATE WHERE CLIENT_CODE=MERGED.INV_CODE;
                    UPDATE WEALTHMAKER.TRANSACTION_MF_TEMP1 SET   CLIENT_CODE=P_MAIN_CODE,SOURCE_CODE=SUBSTR(P_MAIN_CODE,0,8) WHERE CLIENT_CODE=MERGED.INV_CODE;
                    UPDATE TRANSACTION_ST@mf.bajajcapital SET CLIENT_CODE=P_MAIN_CODE,SOURCE_CODE=SUBSTR(P_MAIN_CODE,0,8) WHERE CLIENT_CODE=MERGED.INV_CODE;
                    UPDATE TRANSACTION_STTEMP SET CLIENT_CODE=P_MAIN_CODE,SOURCE_CODE=SUBSTR(P_MAIN_CODE,0,8),MODIFY_TALISMA=SYSDATE WHERE CLIENT_CODE=MERGED.INV_CODE;
                    UPDATE INVESTOR_FOLIO@mf.bajajcapital SET INVESTOR_CODE=P_MAIN_CODE WHERE INVESTOR_CODE=MERGED.INV_CODE;
                    UPDATE INVESTOR_MASTER_IPO SET INV_CODE=P_MAIN_CODE WHERE INV_CODE=MERGED.INV_CODE;
                    UPDATE REVERTAL_TRANSACTION SET CLIENT_CODE=P_MAIN_CODE,SOURCE_CODE=SUBSTR(P_MAIN_CODE,0,8)WHERE CLIENT_CODE=MERGED.INV_CODE;
                    UPDATE TRANSACTION_IPO SET INV_CODE=P_MAIN_CODE WHERE INV_CODE=MERGED.INV_CODE;
                    UPDATE TRAN_PAYOUT@mf.bajajcapital SET INV_CODE=P_MAIN_CODE WHERE INV_CODE=MERGED.INV_CODE;
                    UPDATE BAJAJ_AR_HEAD SET CLIENT_CD=P_MAIN_CODE,MODIFY_TALISMA=SYSDATE WHERE CLIENT_CD=MERGED.INV_CODE;
                    UPDATE TRAN_NET_BALANCE6@mf.bajajcapital SET CLIENT_CODE=P_MAIN_CODE WHERE CLIENT_CODE=MERGED.INV_CODE;
                    UPDATE REDEM@mf.bajajcapital SET CLIENT_CODE=P_MAIN_CODE,SOURCE_CODE=SUBSTR(P_MAIN_CODE,0,8) WHERE CLIENT_CODE=MERGED.INV_CODE;
                    UPDATE TRAN_IPO SET INV_CODE=P_MAIN_CODE WHERE INV_CODE=MERGED.INV_CODE;
                    UPDATE TRAN_LEAD SET INV_CODE=P_MAIN_CODE WHERE INV_CODE=MERGED.INV_CODE;                         
                    UPDATE TB_DOC_UPLOAD SET   INV_CODE=P_MAIN_CODE WHERE INV_CODE=TO_CHAR(MERGED.INV_CODE);
                    UPDATE WEALTHMAKER.CLIENT_VOUCHER_DETAILS SET INV_CODE=P_MAIN_CODE WHERE INV_CODE=MERGED.INV_CODE;
                    UPDATE PORT_TRANSACTION_ST@mf.bajajcapital  SET CLIENT_CODE=P_MAIN_CODE,SOURCE_CODE=SUBSTR(P_MAIN_CODE,0,8) WHERE CLIENT_CODE=MERGED.INV_CODE;
                    UPDATE PORTFOLIO_TRANS@mf.bajajcapital SET CLIENT_CODE=P_MAIN_CODE,SOURCE_CODE=SUBSTR(P_MAIN_CODE,0,8) WHERE CLIENT_CODE=MERGED.INV_CODE;
                                          
                    UPDATE FP_INVESTOR SET FAMILYHEAD_CODE=P_MAIN_CODE WHERE FAMILYHEAD_CODE=MERGED.INV_CODE;
                    UPDATE FP_INVESTOR SET FAM_MEM1=REPLACE(FAM_MEM1,MERGED.INV_CODE,P_MAIN_CODE) WHERE FAMILYHEAD_CODE LIKE ''|| MERGED.INV_CODE ||'%' OR FAMILYHEAD_CODE LIKE ''||P_MAIN_CODE ||'%';
                    UPDATE FP_INVESTOR SET FAM_MEM2=REPLACE(FAM_MEM2,MERGED.INV_CODE,P_MAIN_CODE) WHERE FAMILYHEAD_CODE LIKE ''|| MERGED.INV_CODE ||'%' OR FAMILYHEAD_CODE LIKE ''||P_MAIN_CODE ||'%';
                    UPDATE FP_INVESTOR SET FAM_MEM3=REPLACE(FAM_MEM3,MERGED.INV_CODE,P_MAIN_CODE) WHERE FAMILYHEAD_CODE LIKE ''|| MERGED.INV_CODE ||'%' OR FAMILYHEAD_CODE LIKE ''||P_MAIN_CODE ||'%';
                                
                    UPDATE TRANSACTION_ST_ONLINE    SET CLIENT_CODE=P_MAIN_CODE WHERE CLIENT_CODE=MERGED.INV_CODE;
                    UPDATE ONLINE_CLIENT_REQUEST    SET INV_CODE=P_MAIN_CODE WHERE INV_CODE=MERGED.INV_CODE;
                    UPDATE ONLINE_CLIENT_REQUEST_HIST    SET INV_CODE=P_MAIN_CODE WHERE INV_CODE=MERGED.INV_CODE;
                    UPDATE ONLINE_BUSINESS_SUMMARY  SET CLIENT_CODEWM=P_MAIN_CODE WHERE CLIENT_CODEWM=MERGED.INV_CODE;
                    UPDATE OFFLINE_BUSINESS_SUMMARY SET CLIENT_CODEWM=P_MAIN_CODE WHERE CLIENT_CODEWM=MERGED.INV_CODE;
                    UPDATE ADVISORSUBENTRY SET CLIENT_CODE=P_MAIN_CODE WHERE CLIENT_CODE=MERGED.INV_CODE;
                    
                     IF MAIN.FAMILY_HEAD IS NULL AND MERGED.FAMILY_HEAD IS NOT NULL THEN
                     
                        UPDATE INVESTOR_MASTER SET FAMILY_HEAD = MERGED.FAMILY_HEAD WHERE INV_CODE=MERGED.INV_CODE;
                        
                     END IF;
                     
                     IF MAIN.IMPLEMENTED_DATE IS NULL AND MERGED.IMPLEMENTED_DATE IS NOT NULL THEN
                     
                        UPDATE INVESTOR_MASTER SET IMPLEMENTED_DATE = MERGED.IMPLEMENTED_DATE WHERE INV_CODE=MERGED.INV_CODE;
                        
                     END IF;
                     
                     IF MAIN.PHONE IS NULL AND MERGED.PHONE IS NOT NULL THEN
                     
                        UPDATE INVESTOR_MASTER SET PHONE = MERGED.PHONE WHERE INV_CODE=MERGED.INV_CODE;
                        
                     END IF;
                     
                     IF MAIN.EMAIL IS NULL AND MERGED.EMAIL IS NOT NULL THEN
                     
                        UPDATE INVESTOR_MASTER SET EMAIL = MERGED.EMAIL WHERE INV_CODE=MERGED.INV_CODE;
                        
                     END IF;
                     
                     IF MAIN.MOBILE IS NULL AND (MERGED.MOBILE IS NOT NULL AND MERGED.MOBILE <>0) THEN
                     
                        UPDATE INVESTOR_MASTER SET MOBILE = MERGED.MOBILE WHERE INV_CODE=MERGED.INV_CODE;
                        
                     ELSIF (MERGED.MOBILE IS NOT NULL AND MERGED.MOBILE <>0)  THEN                         
                        
                         UPDATE INVESTOR_MASTER SET PHONE = MAIN.PHONE ||','|| MERGED.MOBILE  WHERE INV_CODE=MERGED.INV_CODE;
                        
                     END IF;
                     
                     IF MAIN.PINCODE IS NULL AND MERGED.PINCODE IS NOT NULL THEN
                     
                        UPDATE INVESTOR_MASTER SET PINCODE = MERGED.PINCODE WHERE INV_CODE=MERGED.INV_CODE;
                        
                     END IF;
                     
                     IF MAIN.INVESTOR_CODE IS NULL AND MERGED.INVESTOR_CODE IS NOT NULL THEN
                     
                        UPDATE INVESTOR_MASTER SET INVESTOR_CODE = MERGED.INVESTOR_CODE WHERE INV_CODE=MERGED.INV_CODE;
                        
                     END IF;
                     
                     IF MAIN.PAN IS NULL AND MERGED.PAN IS NOT NULL THEN
                     
                        UPDATE INVESTOR_MASTER SET PAN = MERGED.PAN WHERE INV_CODE=MERGED.INV_CODE;
                        
                     END IF;
                     
                     IF MERGED.MANDATE_FLAG='Y' THEN
                     
                        UPDATE INVESTOR_MASTER SET MANDATE_FLAG = MERGED.MANDATE_FLAG WHERE INV_CODE=MERGED.INV_CODE;
                        
                     END IF;                     
                     
                     UPDATE INVESTOR_MASTER SET MODIFY_DATE = SYSDATE WHERE INV_CODE=MERGED.INV_CODE;
                     
                     INSERT INTO CLIENT_INV_MERGE_LOG VALUES(P_MAIN_CODE,MERGED.INV_CODE,P_LOGIN_ID,SYSDATE);
                     INSERT INTO INVESTOR_DEL SELECT * FROM INVESTOR_MASTER  WHERE INV_CODE=MERGED.INV_CODE;
                     DELETE FROM INVESTOR_MASTER  WHERE INV_CODE=MERGED.INV_CODE;
                     INSERT INTO ACCOUNT_MERGE_LOG VALUES(P_MAIN_CODE,MERGED.INV_CODE,P_LOGIN_ID,SYSDATE);
            
                     SELECT CLIENT_CODE INTO MYCLIENTCODE FROM CLIENT_TEST WHERE CLIENT_CODEKYC=MERGED.INV_CODE;
                     SELECT MAIN_CODE INTO MYMAINCODE  FROM CLIENT_TEST WHERE CLIENT_CODEKYC=MERGED.INV_CODE;
                     SELECT CLIENT_CODE INTO MYNEWCLIENTCODE FROM CLIENT_TEST WHERE CLIENT_CODEKYC=P_MAIN_CODE;
                     SELECT MAIN_CODE INTO MYNEWMAINCODE FROM CLIENT_TEST WHERE CLIENT_CODEKYC=P_MAIN_CODE;
                     
                     IF LENGTH(MYCLIENTCODE)>2 AND MYCLIENTCODE is not null THEN
                     -- if account exists for the merged investor(Which is not possible)
                        IF TRIM(MAIN.PAN)='' OR MAIN.PAN IS NULL THEN                        
                           IF  TRIM(MERGED.PAN)<>'' AND  MERGED.PAN IS NOT NULL THEN                           
                               UPDATE CLIENT_TEST SET CLIENT_PAN=MERGED.PAN WHERE CLIENT_CODEKYC=P_MAIN_CODE AND CLIENT_PAN IS NULL;                           
                           END IF;
                        END IF;                     
                     END IF;
            
                    UPDATE INVESTOR_FOLIO@mf.bajajcapital SET CLIENT_AH_CODE= MYNEWCLIENTCODE ,UPD_FLAG1='MRG',CLIENT_MAIN_CODE=MYNEWMAINCODE WHERE CLIENT_AH_CODE= MYCLIENTCODE AND CLIENT_MAIN_CODE= MYMAINCODE ;
                    DELETE FROM CLIENT_TEST  WHERE CLIENT_CODEKYC=MERGED.INV_CODE;
                    DELETE FROM INVESTOR_MASTER@mf.bajajcapital  WHERE INV_CODE=MERGED.INV_CODE;
                    
                    P_SUCCESS := 'SUCCESS';
                    
                  EXCEPTION WHEN OTHERS THEN
                    Raise_application_Error(10001,sqlerrm(sqlcode));
                  END;    
                   --DBMS_OUTPUT.PUT_LINE(P_SUCCESS);                   
                END LOOP;
            END LOOP;
            
        EXCEPTION WHEN OTHERS THEN
            P_ERRORMESSAGE := SUBSTR(SQLERRM(SQLCODE),1,4000);
            RETURN;
        END;  
   
END;
/