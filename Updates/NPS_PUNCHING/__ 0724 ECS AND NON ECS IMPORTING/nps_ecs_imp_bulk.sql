CREATE OR REPLACE PROCEDURE WEALTHMAKER.PSM_NPS_ECS_BULK_IMP(
    P_IMP_TYPE  IN VARCHAR2,
    P_ZERO_COMM IN VARCHAR2,
    P_LOG_ID    IN VARCHAR2,
    P_ROLE_ID   IN VARCHAR2,
    P_COMPANY   IN VARCHAR2,
    P_STATUS    IN VARCHAR2,    
    P_OUT       OUT SYS_REFCURSOR
) AS
    V_RETURN_MSG VARCHAR2(100);
    V_COUNT NUMBER;
BEGIN
    -- Start transaction explicitly
    SET TRANSACTION NAME 'NPS_BULK_IMPORT';
    
    IF P_IMP_TYPE = 'NON_ECS' THEN 
    
        -- STEP 0: EXCEL DATA IMPORTED IN PSM_NPS_NES_TBL_TEMP1 --> IT IS DONE FROM THE FRONTED 
        
        -- STEP 1: THEN WE NEED TO CALL PROC PSM_NPS_NES_TEMP_CLEAN TO CLEAN THE DATA
        PSM_NPS_NES_TEMP_CLEAN;
        COMMIT;
      
        -- STEP 2: TAKING BACKUP IN NPS_NONECS_TBL_IMP_BK OF THE PREVIOUSE NPS_NONECS_TBL_IMP TABLE DATA OF THAT USER
        INSERT /*+ APPEND */ INTO NPS_NONECS_TBL_IMP_BK 
        SELECT * FROM NPS_NONECS_TBL_IMP WHERE LOGGEDUSERID  = P_LOG_ID;
        COMMIT;
        
        -- STEP 3: THEN DELETE ALL RECORD OF NPS_NONECS_TBL_IMP THE THAT USER WHO INSERTED THE EXCEL DATA
        EXECUTE IMMEDIATE 'DELETE FROM NPS_NONECS_TBL_IMP WHERE LOGGEDUSERID = :1' USING P_LOG_ID;
        COMMIT;
        
        -- STEP 4: THEN BULK INSERT IN NPS_NONECS_TBL_IMP FROM PSM_NPS_NES_TBL_TEMP1 TABLE DATA OF THE IMPORTED USER USER
        INSERT /*+ APPEND */ INTO NPS_NONECS_TBL_IMP (
            REF_TRAN_CODE, TR_DATE, ECS_AMT, ECS_PERIOD, ECS_PAY_DT, 
            ECS_TRAN_CODE, LOGGEDUSERID, TIMEST, MODIFY_USER, 
            MODIFY_DATE, TPSL_TRANID, CONSUMER_CODE, IMPORT_DT
        )
        SELECT 
            REF_TRAN_CODE, 
            TO_DATE(TR_DATE, 'DD-MON-YYYY'), 
            TO_NUMBER(ECS_AMT), 
            ECS_PERIOD, 
            TO_DATE(ECS_PAY_DT, 'DD-MON-YYYY'), 
            ECS_TRAN_CODE,
            P_LOG_ID, 
            TO_DATE(TIMEST, 'DD-MON-YYYY'), 
            NULL, 
            NULL, 
            TPSL_TRANID, 
            CONSUMER_CODE, 
            TO_DATE(IMPORT_DT, 'DD-MON-YYYY') 
        FROM PSM_NPS_NES_TBL_TEMP1
        WHERE LOGGEDUSERID  = P_LOG_ID; 
        
        V_COUNT := SQL%ROWCOUNT;
        
        COMMIT;
        
        /*
        DELETE FROM NPS_NONECS_TBL_IMP WHERE LOGGEDUSERID  = P_LOG_ID; 
        COMMIT;
        */
        -- STEP 5: PREPREARE THE RETURN MESSAGE
        
        V_RETURN_MSG :=  'NONECS: ' || V_COUNT ||' Record(s) Inserted.';    
            
    ELSIF P_IMP_TYPE = 'ECS' THEN
    
        EXECUTE IMMEDIATE 'TRUNCATE TABLE NPS_NONECS_TBL_IMP_BK';
        INSERT /*+ APPEND */ INTO NPS_NONECS_TBL_IMP_BK 
        SELECT * FROM NPS_NONECS_TBL_IMP;
        
        -- Direct path load for better performance
        INSERT /*+ APPEND */ INTO NPS_NONECS_TBL_IMP (
            REF_TRAN_CODE, TR_DATE, ECS_AMT, ECS_PERIOD, ECS_PAY_DT, 
            ECS_TRAN_CODE, LOGGEDUSERID, TIMEST, MODIFY_USER, 
            MODIFY_DATE, TPSL_TRANID, CONSUMER_CODE, IMPORT_DT
        )
        SELECT 
            REF_TRAN_CODE, 
            TO_DATE(TR_DATE, 'DD-MON-YYYY'), 
            TO_NUMBER(ECS_AMT), 
            ECS_PERIOD, 
            TO_DATE(ECS_PAY_DT, 'DD-MON-YYYY'), 
            ECS_TRAN_CODE,
            P_LOG_ID, 
            TO_DATE(TIMEST, 'DD-MON-YYYY'), 
            NULL, 
            NULL, 
            TPSL_TRANID, 
            CONSUMER_CODE, 
            TO_DATE(IMPORT_DT, 'DD-MON-YYYY') 
        FROM PSM_NPS_NES_TBL_TEMP1
        WHERE REF_TRAN_CODE IS NOT NULL;  -- Filter during SELECT rather than DELETE
        
        V_RETURN_MSG := 'ECS: '||  V_COUNT ||' Record(s) Inserted.';
        
     
        
    END IF;
    
    COMMIT;
    OPEN P_OUT FOR SELECT V_RETURN_MSG as message FROM DUAL;
    
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20001, 'Error in clean_and_update_nps_nonecs: ' || SQLERRM);
END;
/