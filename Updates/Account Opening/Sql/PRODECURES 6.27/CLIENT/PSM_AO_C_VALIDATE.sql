CREATE OR REPLACE PROCEDURE WEALTHMAKER.PSM_AO_C_VALIDATE(
    P_SEARCH_CLIENT_CODE    IN VARCHAR2,
    P_DT_NUMBER             IN VARCHAR2,
    P_GUEST_CODE            IN VARCHAR2,
    P_EXIST_CLIENT_CODE     IN NUMBER,
    P_RM_BUSINESS_CODE      IN VARCHAR2,
    P_TAX_STATUS            IN VARCHAR2,
    P_OCCUPATION            IN NUMBER,
    P_STATUS_CAT            IN VARCHAR2,
    P_CLIENT_CAT            IN VARCHAR2,
    P_ACCOUNT_CAT           IN NUMBER,
    P_SALUTATION1           IN VARCHAR2,
    P_ACCOUNT_NAME          IN VARCHAR2,
    P_SALUTATION2           IN VARCHAR2,
    P_FATHER_NAME           IN VARCHAR2,
    P_ACCOUNT_OTHER         IN VARCHAR2,
    P_GENDER                IN VARCHAR2,
    P_MARITAL_STATUS        IN VARCHAR2,
    P_NATIONALITY           IN VARCHAR2,
    P_RESIDENT_NRI          IN VARCHAR2,
    P_DOB                   DATE,
    P_ANNUAL_INCOME         IN VARCHAR2,
    P_CLIENT_PAN            IN VARCHAR2,
    P_LEAD_TYPE             IN VARCHAR2,
    P_GUARDIAN_PERSON       IN VARCHAR2,
    P_GUARDIAN_PERSON_NATIONALITY IN VARCHAR2,
    P_GUARDIAN_PERSON_PAN   IN VARCHAR2,
    P_MAILING_ADDRESS1      IN VARCHAR2,
    P_MAILING_ADDRESS2      IN VARCHAR2,
    P_MAILING_STATE         IN VARCHAR2,
    P_MAILING_CITY          IN VARCHAR2,
    P_MAILING_PINCODE       IN VARCHAR2,
    P_PERMANENT_ADDRESS1    IN VARCHAR2,
    P_PERMANENT_ADDRESS2    IN VARCHAR2,
    P_PERMANENT_STATE       IN VARCHAR2,
    P_PERMANENT_CITY        IN VARCHAR2,
    P_PERMANENT_PINCODE     IN VARCHAR2,
    P_NRI_ADDRESS           IN VARCHAR2,
    P_FAX_VALUE             IN VARCHAR2,
    P_AADHAR_VALUE          IN NUMBER,
    P_EMAIL_VALUE           IN VARCHAR2,
    P_EMAIL_OFFICIAL_VALUE  IN VARCHAR2,
    P_PHONE_OFFICE_STD_VALUE    IN VARCHAR2,
    P_PHONE_OFFICE_NUMBER_VALUE IN VARCHAR2,
    P_PHONE_RES_STD_VALUE   IN VARCHAR2,
    P_PHONE_RES_NUMBER_VALUE    IN VARCHAR2,
    P_MOBILE_NO_VALUE       IN VARCHAR2,
    P_REFERENCE_NAME1_VALUE IN VARCHAR2,
    P_REFERENCE_NAME2_VALUE IN VARCHAR2,
    P_REFERENCE_NAME3_VALUE IN VARCHAR2,
    P_REFERENCE_NAME4_VALUE IN VARCHAR2,
    P_MOBILE_NO1_VALUE      IN NUMBER,
    P_MOBILE_NO2_VALUE      IN NUMBER,
    P_MOBILE_NO3_VALUE      IN NUMBER,
    P_MOBILE_NO4_VALUE      IN NUMBER,
    P_LOGGED_IN_USER        IN VARCHAR2,
    P_EMP_RM                IN NUMBER,
    P_EMP_SRC               IN NUMBER,
    P_RESULT OUT SYS_REFCURSOR
) AS
    -- Declare local variables
    ISVALIDDT               NUMBER;
    ISVALIDGUEST            NUMBER;
    ISVLAIDPITCH_CODE_2     NUMBER:=0;
    V_GUESTCODE             NUMBER;
    VPAN                    NUMBER;
    VMOBILE                 NUMBER;
    VEMAIL                  NUMBER;
    VG_PAN                  NUMBER;
    ISVALIDPAN              VARCHAR2(10);
    ISVALID_GPAN            VARCHAR2(10);
    ISVALID_AADHAAR         VARCHAR2(10);

    ISVALIDMOBILE           NUMBER;
    ISVALIDEMAIL            NUMBER;
    DCT_FLAG                INT;
    V_SOURCE_CODE           VARCHAR2(20); -- To store the SOURCE_CODE of the current client
    V_AADHAR                NUMBER;
    V_MAADHAR               NUMBER;
    CURRENT_ROLE            NUMBER:=0;
    V_GUEST_FPC_BRANCH      NUMBER:=0;
BEGIN

BEGIN -- Check ACCESS
    SELECT COUNT(ROLE_ID)
    INTO CURRENT_ROLE
    FROM WEALTHMAKER.USERDETAILS_JI
    WHERE TRIM(LOGIN_ID) = TRIM(P_LOGGED_IN_USER)
    AND ROLE_ID = '212'; -- FOR PUNCHING
    EXCEPTION WHEN NO_DATA_FOUND THEN CURRENT_ROLE := 0;
END;

--IF CURRENT_ROLE = 0 THEN OPEN P_RESULT FOR SELECT 'ACCESS: ONLY PUNCHING TEAM CAN PUNCH!' AS MESSAGE FROM DUAL;  RETURN; END IF;

BEGIN -- get family sourcecode
    SELECT COUNT(SOURCE_ID)
    INTO V_SOURCE_CODE
    FROM WEALTHMAKER.INVESTOR_MASTER
    WHERE SOURCE_ID != TRIM(SUBSTR(P_EXIST_CLIENT_CODE,1,8)); EXCEPTION WHEN NO_DATA_FOUND THEN V_SOURCE_CODE := NULL;
END;

/*
IF TRIM(P_EXIST_CLIENT_CODE) IS NOT NULL AND TRIM(P_SEARCH_CLIENT_CODE) IS NULL THEN
    IF TRIM (P_DT_NUMBER) IS NULL THEN
      OPEN P_RESULT FOR SELECT 'DT is required! -- >' || P_SEARCH_CLIENT_CODE AS MESSAGE FROM DUAL;  RETURN;
    END IF;
end if;

*/



-- COMMON MANDATORY FIELDS VALIDATION

-- Validate that the mailing pincode is not null or empty
IF P_MAILING_PINCODE IS NULL OR TRIM(P_MAILING_PINCODE) IS NULL THEN
    OPEN P_RESULT FOR  
    SELECT 'MAILING PINCODE IS EMPTY' AS MESSAGE FROM DUAL;
    RETURN;
END IF;


IF P_MARITAL_STATUS IS NULL OR TRIM(P_MAILING_PINCODE) IS NULL THEN
    OPEN P_RESULT FOR  
    SELECT 'MARITAL STATUS IS EMPTY' AS MESSAGE FROM DUAL;
    RETURN;
END IF;






IF TRIM(P_RM_BUSINESS_CODE) IS  NULL THEN
    OPEN P_RESULT FOR
    SELECT 'BUSINESS CODE CANNOT BE NULL' AS MESSAGE FROM DUAL;
    RETURN;
END IF;

/*
IF TRIM(P_RM_BUSINESS_CODE) IS  NOT NULL THEN
    SELECT COUNT(BRANCH_CODE) INTO V_GUEST_FPC_BRANCH
    FROM BRANCH_MASTER WHERE BRANCH_TAR_CAT  = '185' -- FPC
    AND BRANCH_CODE = (SELECT SOURCE FROM EMPLOYEE_MASTER WHERE payroll_id= P_RM_BUSINESS_CODE AND ROWNUM = 1);

    IF V_GUEST_FPC_BRANCH > 0 THEN         OPEN P_RESULT FOR SELECT 'A valid guest code requried for FPC' AS MESSAGE FROM DUAL;         RETURN;     END IF;
ELSE
    OPEN P_RESULT FOR
    SELECT 'BUSINESS CODE CANNOT BE NULL' AS MESSAGE FROM DUAL;
    RETURN;
END IF;
*/


IF TRIM(P_EXIST_CLIENT_CODE) IS NOT NULL THEN
BEGIN

    IF LENGTH(TRIM(P_EXIST_CLIENT_CODE)) < 11 THEN
        OPEN P_RESULT FOR
            SELECT 'Invalid Client' AS MESSAGE FROM DUAL;
            RETURN;
    END IF;


    IF TRIM(P_GUEST_CODE) IS NOT NULL THEN
        SELECT NVL(COUNT(GUEST_CD),0) INTO ISVALIDGUEST 
        FROM BAJAJ_VENUE_BOOKING WHERE GUEST_CD = TRIM(P_GUEST_CODE);

        IF ISVALIDGUEST = 0 THEN
            OPEN P_RESULT FOR SELECT 'CIENT UPDATE: Guest Code does not exist' AS MESSAGE FROM DUAL;
            RETURN;

        ELSIF ISVALIDGUEST > 0  THEN
            SELECT NVL(COUNT(GUEST_CD),0) INTO V_GUESTCODE 
            FROM CLIENT_MASTER WHERE GUEST_CD = TRIM(P_GUEST_CODE) 
            AND CLIENT_CODE  != SUBSTR(TRIM(P_EXIST_CLIENT_CODE),1,8);

            IF V_GUESTCODE > 0 THEN -- Duplicate Guest Code found in CLIENT_MASTER
                OPEN P_RESULT FOR SELECT 'CIENT UPDATE: DUPLICATE GUEST CODE WITH ' || (SELECT client_code FROM CLIENT_MASTER WHERE GUEST_CD = trim(P_GUEST_CODE) AND ROWNUM = 1 ) AS MESSAGE FROM DUAL;
                RETURN;
            END IF;
        END IF;
    ELSE
        IF TRIM(P_RM_BUSINESS_CODE) IS  NOT NULL THEN
            SELECT COUNT(BRANCH_CODE) INTO V_GUEST_FPC_BRANCH
            FROM BRANCH_MASTER WHERE BRANCH_TAR_CAT  = '185' -- FPC
            AND BRANCH_CODE = (SELECT SOURCE FROM EMPLOYEE_MASTER WHERE payroll_id= P_RM_BUSINESS_CODE AND ROWNUM = 1);

            IF V_GUEST_FPC_BRANCH > 0 THEN
                OPEN P_RESULT FOR SELECT 'CIENT UPDATE: A valid guest code requried for FPC' AS MESSAGE FROM DUAL;
                --RETURN;
            END IF;
        ELSE
            OPEN P_RESULT FOR
            SELECT 'CIENT UPDATE: BUSINESS CODE CANNOT BE NULL' AS MESSAGE FROM DUAL;
            RETURN;
        END IF;
    END IF;


    -- Validate PAN and return appropriate error messages
    IF TRIM(P_CLIENT_PAN) IS NOT NULL THEN
        ISVALIDPAN := VALIDATEPAN(UPPER(TRIM(SUBSTR(P_CLIENT_PAN, 1, 10))));

        IF ISVALIDPAN IN ('InValid', 'Miss') THEN
            OPEN P_RESULT FOR
            SELECT 'CIENT UPDATE: Invalid PAN (e.g., AAAAA9999A)' AS MESSAGE FROM DUAL;
            RETURN;


        ELSIF ISVALIDPAN = 'Valid' THEN
            SELECT COUNT(PAN) INTO VPAN
            FROM WEALTHMAKER.INVESTOR_MASTER
            WHERE UPPER(TRIM(SUBSTR(PAN, 1, 10))) = UPPER(TRIM(SUBSTR(P_CLIENT_PAN, 1, 10)))
            AND SOURCE_ID != TRIM(SUBSTR(P_EXIST_CLIENT_CODE,1,8)) 
            AND INV_CODE != TRIM(P_EXIST_CLIENT_CODE);

            IF VPAN > 0 THEN
                OPEN P_RESULT FOR
                SELECT 'CIENT UPDATE: Duplicate PAN' AS MESSAGE
                FROM DUAL;
                RETURN;
            END IF;
        END IF;
    END IF;

    -- VALIDATE GUARDIAN PAN, return an error message
    IF TRIM(P_GUARDIAN_PERSON_PAN) IS NOT NULL THEN
        ISVALID_GPAN    := VALIDATEPAN(UPPER(TRIM(SUBSTR(P_GUARDIAN_PERSON_PAN, 1, 10))));
        IF ISVALID_GPAN = 'InValid' OR ISVALID_GPAN = 'Miss' THEN
            OPEN P_RESULT FOR SELECT 'CIENT UPDATE: Invalid Guardian PAN (e.g. AAAAA9999A)' AS MESSAGE FROM DUAL;
            RETURN;

        ELSIF ISVALID_GPAN = 'Valid' THEN
            SELECT COUNT(G_PAN) INTO VG_PAN
            FROM WEALTHMAKER.INVESTOR_MASTER
            WHERE (UPPER(TRIM(SUBSTR(G_PAN, 1, 10)))) = (UPPER(TRIM(SUBSTR(P_GUARDIAN_PERSON_PAN, 1, 10))))
            AND SOURCE_ID != TRIM(SUBSTR(P_EXIST_CLIENT_CODE,1,8)) 
            AND INV_CODE != TRIM(P_EXIST_CLIENT_CODE);

            IF VG_PAN > 0 THEN
                OPEN P_RESULT FOR SELECT 'CIENT UPDATE: Duplicate Guardian PAN (Cannot be shared across different families)' AS MESSAGE FROM DUAL;
                RETURN;
            END IF;
        END IF;
    END IF;

    IF TRIM(P_AADHAR_VALUE) IS NOT NULL THEN
        ISVALID_AADHAAR := PSM_VALIDATEAADHAAR(TRIM(P_AADHAR_VALUE));

        IF ISVALID_AADHAAR = 'Invalid' OR ISVALID_AADHAAR = 'Miss' THEN
            OPEN P_RESULT FOR SELECT 'CIENT UPDATE: Invalid Aadhaar Number (Must be 12-digit numeric)' AS MESSAGE FROM DUAL;
            RETURN;    

        ELSIF ISVALID_AADHAAR = 'Valid' THEN
            SELECT COUNT(AADHAR_CARD_NO) INTO V_AADHAR
            FROM WEALTHMAKER.INVESTOR_MASTER
            WHERE AADHAR_CARD_NO = TRIM(SUBSTR(P_AADHAR_VALUE,1,12))
            AND INV_CODE != TRIM(P_EXIST_CLIENT_CODE);

            IF V_AADHAR > 0 THEN
                OPEN P_RESULT FOR SELECT 'CIENT UPDATE: Duplicate Aadhaar Number' AS MESSAGE FROM DUAL;
                RETURN;
            END IF;
        END IF;
    END IF;

    -- VALIDATE EMAIL AND RETURN INVALID, DUPLICATE
    IF TRIM(P_EMAIL_VALUE) IS NOT NULL THEN
        IF UPPER(P_EMAIL_VALUE) NOT IN ('NA', 'NOT AVAILABLE', 'N/A', 'NONE') THEN
            ISVALIDEMAIL := VALIDATE_EMAIL(UPPER(P_EMAIL_VALUE));

            IF ISVALIDEMAIL = 0 THEN
                OPEN P_RESULT FOR SELECT 'CIENT UPDATE: Invalid Email' AS MESSAGE FROM DUAL; 
                RETURN;

            ELSIF ISVALIDEMAIL > 0 THEN
                SELECT NVL(COUNT(EMAIL),0) INTO VEMAIL 
                FROM WEALTHMAKER.INVESTOR_MASTER 
                WHERE UPPER(EMAIL) = UPPER(P_EMAIL_VALUE)
                AND SOURCE_ID != TRIM(SUBSTR(P_EXIST_CLIENT_CODE,1,8)) 
                AND INV_CODE != TRIM(P_EXIST_CLIENT_CODE);  

                IF VEMAIL > 0 THEN
                    OPEN P_RESULT FOR 
                    SELECT 'CIENT UPDATE: Duplicate Email (Cannot be shared across different families) HEAD -->' || P_EXIST_CLIENT_CODE AS MESSAGE FROM DUAL; 
                    RETURN;
                END IF;
            END IF;
        END IF;
    END IF ;

    -- VALIDATE MOBILE AND RETURN INVALID, DUPLICATE
    IF TRIM(P_MOBILE_NO_VALUE) IS NOT NULL AND UPPER(P_NATIONALITY) NOT IN ('NRI') AND UPPER(P_RESIDENT_NRI) NOT IN ('NRI') THEN
        ISVALIDMOBILE   := VALIDATE_MOBILE(P_MOBILE_NO_VALUE);

        IF ISVALIDMOBILE = 0 THEN
            OPEN P_RESULT FOR SELECT 'CIENT UPDATE: Invalid Mobile Number (e.g. 9999999999)' AS MESSAGE FROM DUAL;
            RETURN;  

        ELSIF ISVALIDMOBILE = 1  THEN
            SELECT COUNT(MOBILE) INTO VMOBILE 
            FROM WEALTHMAKER.INVESTOR_MASTER 
            WHERE MOBILE = P_MOBILE_NO_VALUE
            AND SOURCE_ID != TRIM(SUBSTR(P_EXIST_CLIENT_CODE,1,8)) 
            AND INV_CODE != TRIM(P_EXIST_CLIENT_CODE);

            IF VMOBILE > 0 THEN
                OPEN P_RESULT FOR SELECT 'CIENT UPDATE: Duplicate Mobile Number (Cannot be shared across different families)' AS MESSAGE FROM DUAL; RETURN;
            END IF;
        END IF;
    END IF;

END;

    OPEN P_RESULT FOR
    SELECT 'CLIENT UPDATE PASS' AS MESSAGE FROM DUAL;

ELSIF TRIM(P_EXIST_CLIENT_CODE) IS NULL THEN
    BEGIN

    /* DT NUMBER VALIDATION  DOING FROM CS
     --IF TRIM(P_DT_NUMBER) IS NOT NULL THEN ISVALIDDT := CHECK_DT_NEWINV(TRIM(P_DT_NUMBER)); END IF;
    IF TRIM(P_DT_NUMBER) IS NOT NULL THEN
        ISVALIDDT := CHECK_DT_NEWINV(TRIM(P_DT_NUMBER));
        --SELECT NVL(COUNT(COMMON_ID),0) INTO DT_FLAG FROM TB_DOC_UPLOAD  WHERE COMMON_ID = TRIM(P_DT_NUMBER) AND tran_type= 'AC' AND rejection_status = '0' AND verification_flag = '1' AND PUNCHING_FLAG = '0';

        IF ISVALIDDT = 0 THEN
            OPEN P_RESULT FOR
            SELECT 'PLEASE ENTER VALID DT' AS message FROM DUAL; RETURN;  
        END IF;
    ELSE
        OPEN P_RESULT FOR
        SELECT 'PLEASE ENTER DT FOR NEW ACCOUNT' AS message FROM DUAL; RETURN;  
    END IF;
    */
   IF TRIM(P_GUEST_CODE) IS NOT NULL THEN
        SELECT NVL(COUNT(GUEST_CD),0) INTO ISVALIDGUEST
        FROM BAJAJ_VENUE_BOOKING WHERE GUEST_CD = TRIM(P_GUEST_CODE);
       

        IF ISVALIDGUEST = 0 THEN
            OPEN P_RESULT FOR SELECT 'CIENT SAVE: Guest Code does not exist' AS MESSAGE FROM DUAL;
            RETURN;
        end if;
       
        SELECT NVL(COUNT(A.ACCOUNTNO), 0) INTO ISVLAIDPITCH_CODE_2
        FROM CLIENTBASICDET A
        WHERE A.ACCOUNTNO = (SELECT PITCH_BOOK_NO FROM BAJAJ_VENUE_BOOKING WHERE GUEST_CD = TRIM(P_GUEST_CODE) AND ROWNUM = 1);
     
        IF ISVLAIDPITCH_CODE_2 = 0 THEN
            OPEN P_RESULT FOR
            SELECT 'CIENT SAVE: Guest Code does not exist' AS MESSAGE FROM DUAL;
            RETURN;
        ELSIF ISVALIDGUEST > 0  THEN
            SELECT NVL(COUNT(GUEST_CD),0)
            INTO V_GUESTCODE
            FROM CLIENT_MASTER
            WHERE GUEST_CD = TRIM(P_GUEST_CODE);

            IF V_GUESTCODE > 0 THEN -- Duplicate Guest Code found in CLIENT_MASTER
                OPEN P_RESULT FOR
                SELECT 'CIENT SAVE: DUPLICATE GUEST CODE WITH ' || (SELECT client_code FROM CLIENT_MASTER WHERE GUEST_CD = trim(P_GUEST_CODE) AND ROWNUM = 1 ) AS MESSAGE FROM DUAL;
                RETURN;
            END IF;
        END IF;
    ELSE -- REQUIRED FOR FPC
        IF TRIM(P_RM_BUSINESS_CODE) IS  NOT NULL THEN
            SELECT COUNT(BRANCH_CODE)
            INTO V_GUEST_FPC_BRANCH
            FROM BRANCH_MASTER WHERE BRANCH_TAR_CAT  = '185' -- FPC
            AND BRANCH_CODE = P_RM_BUSINESS_CODE;

            IF V_GUEST_FPC_BRANCH > 0 THEN
                OPEN P_RESULT FOR
                SELECT 'CIENT SAVE: A valid guest code requried for FPC' AS MESSAGE FROM DUAL;
                RETURN;
            END IF;
        END IF;
    END IF;

    -- Validate Business RM Code  
    IF TRIM(P_RM_BUSINESS_CODE) IS NULL THEN
        OPEN P_RESULT FOR
            SELECT 'CIENT SAVE: VALID BUSINESS RM REQUIRED' AS message FROM DUAL;RETURN;
    END IF;

    IF TRIM(P_CLIENT_PAN) IS NOT NULL THEN
        ISVALIDPAN := VALIDATEPAN(UPPER(TRIM(SUBSTR(P_CLIENT_PAN, 1, 10))));
        IF ISVALIDPAN IN ('InValid', 'Miss') THEN
            OPEN P_RESULT FOR SELECT 'CIENT SAVE: Invalid PAN (e.g., AAAAA9999A)' AS message FROM DUAL; 
            RETURN;
            
        ELSIF ISVALIDPAN = 'Valid' THEN
            SELECT NVL(count(PAN),0)
            INTO VPAN
            FROM WEALTHMAKER.INVESTOR_MASTER
            WHERE UPPER(TRIM(SUBSTR(PAN, 1, 10))) = UPPER(TRIM(SUBSTR(P_CLIENT_PAN, 1, 10)));

            IF VPAN > 0 THEN
                OPEN P_RESULT FOR SELECT 'CIENT SAVE: Duplicate PAN' AS message FROM DUAL;
                RETURN;
            END IF;
        END IF;
    END IF;

    IF TRIM(P_GUARDIAN_PERSON_PAN) IS NOT NULL THEN      
        ISVALID_GPAN := VALIDATEPAN(UPPER(TRIM(SUBSTR(P_GUARDIAN_PERSON_PAN, 1, 10))));

        IF ISVALID_GPAN = 'InValid' OR ISVALID_GPAN = 'Miss' THEN
            OPEN P_RESULT FOR SELECT 'CIENT SAVE: Invalid Guardian PAN (e.g. AAAAA9999A)' AS message FROM DUAL;
            RETURN;
            
        ELSIF ISVALID_GPAN = 'Valid' THEN
                SELECT COUNT(G_PAN) INTO VG_PAN
                FROM WEALTHMAKER.INVESTOR_MASTER
                WHERE UPPER(G_PAN) = UPPER(P_GUARDIAN_PERSON_PAN)
                --AND P_GUARDIAN_PERSON_PAN  IN (SELECT PAN FROM INVESTOR_MASTER WHERE PAN = P_GUARDIAN_PERSON_PAN AND ROWNUM = 1)
                ;
            IF VG_PAN > 0 THEN
                OPEN P_RESULT FOR SELECT 'CIENT SAVE: Duplicate Guardian PAN (Cannot be shared across different families)' AS message FROM DUAL; 
                RETURN;
            END IF;
        END IF;
    end if;

    IF TRIM(P_AADHAR_VALUE) IS NOT NULL THEN
        ISVALID_AADHAAR := PSM_VALIDATEAADHAAR(TRIM(P_AADHAR_VALUE));

        IF ISVALID_AADHAAR = 'Invalid' OR ISVALID_AADHAAR = 'Miss' THEN
            OPEN P_RESULT FOR SELECT 'CIENT SAVE: Invalid Aadhaar Number (Must be 12-digit numeric)' AS message FROM DUAL;  
            RETURN;
            
        ELSIF ISVALID_AADHAAR = 'Valid' THEN          
                SELECT NVL(COUNT(aadhar_card_no),0)
                INTO V_AADHAR
                FROM WEALTHMAKER.INVESTOR_MASTER
                WHERE aadhar_card_no = TRIM(SUBSTR(P_AADHAR_VALUE,1,12))
                and P_AADHAR_VALUE is not null
                and P_AADHAR_VALUE != 0;
            IF V_AADHAR > 0 THEN
            OPEN P_RESULT FOR
                SELECT 'CIENT SAVE: Duplicate Aadhaar Number' AS message FROM DUAL; RETURN;
            END IF;
        END IF;
    END IF;

    IF TRIM(P_EMAIL_VALUE) IS NOT NULL THEN
        ISVALIDEMAIL := VALIDATE_EMAIL(UPPER(P_EMAIL_VALUE));
        
        IF UPPER(P_EMAIL_VALUE) NOT IN ('NA', 'NOT AVAILABLE', 'N/A','NONE') THEN
            IF ISVALIDEMAIL = 0 THEN
                OPEN P_RESULT FOR SELECT 'CIENT SAVE: Invalid Email' AS message FROM DUAL;
                RETURN;

            ELSIF ISVALIDEMAIL = 1  THEN
                    SELECT NVL(COUNT(EMAIL),0)
                    INTO VEMAIL
                    FROM WEALTHMAKER.INVESTOR_MASTER
                    WHERE UPPER(EMAIL) = UPPER(P_EMAIL_VALUE)
                    ;
                IF VEMAIL > 0 THEN
                    OPEN P_RESULT FOR SELECT 'CIENT SAVE: Duplicate Email' AS message FROM DUAL; 
                    RETURN;
                END IF;
            END IF;
        END IF ;
    END IF;

    IF TRIM(P_MOBILE_NO_VALUE) IS NOT NULL AND UPPER(P_NATIONALITY) NOT IN ('NRI') AND UPPER(P_RESIDENT_NRI) NOT IN ('NRI') THEN
        ISVALIDMOBILE := VALIDATE_MOBILE(P_MOBILE_NO_VALUE);

        IF ISVALIDMOBILE = 0 THEN
            OPEN P_RESULT FOR SELECT 'CIENT SAVE: Invalid Mobile Number (e.g. 9999999999)' AS message FROM DUAL;
            RETURN; 
               
        ELSIF ISVALIDMOBILE = 1  THEN
                SELECT NVL(COUNT(MOBILE),0)
                INTO VMOBILE
                FROM WEALTHMAKER.INVESTOR_MASTER
                WHERE MOBILE = P_MOBILE_NO_VALUE
                --AND SUBSTR(INV_CODE,1,1) = '4' 
                ;        

            IF VMOBILE > 0 THEN
                OPEN P_RESULT FOR SELECT 'CIENT SAVE: Duplicate Mobile Number ' || P_MOBILE_NO_VALUE AS message FROM DUAL;
                RETURN;
            END IF;
        END IF;
    END IF;

    END;

    OPEN P_RESULT FOR
    SELECT 'CLIENT INSERT PASS' AS MESSAGE FROM DUAL;


END IF;

END;
/
