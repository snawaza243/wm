
  CREATE TABLE "WEALTHMAKER"."TB_DOC_UPLOAD" 
   (	"COMMON_ID" VARCHAR2(15 BYTE) CONSTRAINT "CONS_COMMON_ID" NOT NULL ENABLE, 
	"DOC_ID" NUMBER(15,0), 
	"DOC_FILENAME" VARCHAR2(300 BYTE) CONSTRAINT "CONS_DOC_FILE" NOT NULL ENABLE, 
	"DOC_PATH" VARCHAR2(300 BYTE) CONSTRAINT "CONS_DOC_PATH" NOT NULL ENABLE, 
	"TRAN_TYPE" VARCHAR2(50 BYTE) CONSTRAINT "CONS_TRAN_TYPE" NOT NULL ENABLE, 
	"BUSI_RM_CODE" VARCHAR2(10 BYTE) CONSTRAINT "CONS_BUSI_RM" NOT NULL ENABLE, 
	"BUSI_BRANCH_CODE" NUMBER(10,0), 
	"BUSI_TR_DATE" DATE, 
	"INV_CODE" VARCHAR2(15 BYTE), 
	"VERIFICATION_FLAG" VARCHAR2(10 BYTE) DEFAULT '0', 
	"PUNCHING_FLAG" VARCHAR2(10 BYTE) DEFAULT '0', 
	"AUDIT_FLAG" VARCHAR2(10 BYTE) DEFAULT '0', 
	"REJECTION_STATUS" VARCHAR2(10 BYTE) DEFAULT '0', 
	"DOC_UPLOAD_DATE" DATE, 
	"VERIFICATION_DATE" DATE, 
	"PUNCHING_DATE" DATE, 
	"AUDIT_DATE" DATE, 
	"UPLOAD_BY" VARCHAR2(50 BYTE), 
	"VERIFIED_BY" VARCHAR2(50 BYTE), 
	"AUDIT_BY" VARCHAR2(50 BYTE), 
	"PUNCHED_BY" VARCHAR2(50 BYTE), 
	"REMARK" VARCHAR2(500 BYTE), 
	"SCH_CODE" VARCHAR2(100 BYTE), 
	"TRAN_SUB_TYPE" VARCHAR2(100 BYTE), 
	"DOC_ATTACHED" VARCHAR2(500 BYTE), 
	"DIRECT_ANA" VARCHAR2(50 BYTE), 
	"EXIST_CODE" VARCHAR2(50 BYTE), 
	"EXPENSE" NUMBER(12,4), 
	"AR_CODE" VARCHAR2(50 BYTE), 
	"OD_VALUE" NUMBER(12,4), 
	"REF_DT_NO" VARCHAR2(15 BYTE), 
	"SENIOR_APPROVAL" VARCHAR2(4 BYTE) DEFAULT '0', 
	"FRESH_RENEW" VARCHAR2(10 BYTE), 
	"TAT_VER" NUMBER(10,4), 
	"TAT_PUNCH" NUMBER(10,4), 
	"TAT_AUDIT" NUMBER(10,4), 
	"TAT_UP_PUNCH" NUMBER(10,4), 
	"FP_GOAL" VARCHAR2(200 BYTE), 
	"TAT_UP_AUDIT" NUMBER(10,4), 
	"CORP_NAME" VARCHAR2(100 BYTE), 
	"CORP_MOBILE" NUMBER(20,0), 
	"CORP_ADD" VARCHAR2(100 BYTE), 
	"COVERNOTE_NO" NUMBER(10,0), 
	"CLIENT_TYPE" VARCHAR2(50 BYTE), 
	"CLIENT_LANG" VARCHAR2(10 BYTE), 
	"CALLING_TIME" VARCHAR2(50 BYTE), 
	"GUEST_CD" VARCHAR2(12 BYTE), 
	"FP_FLAG" VARCHAR2(10 BYTE), 
	"GOAL_YEAR" NUMBER(*,0), 
	"GOAL_AMOUNT" NUMBER(18,2), 
	"FA_MNTH_SAVING" NUMBER(15,2), 
	"TELE_EXEC" VARCHAR2(20 BYTE), 
	"SUPPORT_MANAGER" VARCHAR2(20 BYTE), 
	"CAMPAIGN_ID" NUMBER(14,0), 
	"CAMPAIGN_COMMON_ID" VARCHAR2(15 BYTE), 
	"FP_AGE_FLAG" VARCHAR2(1 BYTE), 
	"EXISTING_COVER" NUMBER(10,0), 
	"ZERO_PAYOUT_FLG" CHAR(1 BYTE) DEFAULT 0, 
	"CSO_RM_CODE" VARCHAR2(10 BYTE), 
	"POSP_ENABLED_TRAN" CHAR(1 BYTE), 
	"LEAD_ID" VARCHAR2(50 BYTE), 
	"LEAD_TYPE" CHAR(20 BYTE), 
	"UPD_API" CHAR(1 BYTE), 
	"BANKID" NUMBER(5,0), 
	"ACCOUNT_NO" VARCHAR2(50 BYTE), 
	"IFSC_CODE" VARCHAR2(15 BYTE), 
	"BANK_BRANCH_NAME" VARCHAR2(50 BYTE), 
	"ACC_TYPE_ID" NUMBER(3,0), 
	"MOBILE" NUMBER(12,0), 
	"EMAIL" VARCHAR2(50 BYTE), 
	"NEFT_VERIFICATION_FLAG" CHAR(1 BYTE), 
	"NEFT_VERIFICATION_DATE" DATE, 
	"NEFT_VERIFICTATION_BY" VARCHAR2(12 BYTE), 
	"NEFT_REJECTION_STATUS" CHAR(1 BYTE), 
	"NEFT_REJECTION_DATE" DATE, 
	"NEFT_REJECTED_BY" VARCHAR2(12 BYTE), 
	"BACKDATED_APPROVE_FLAG" CHAR(1 BYTE), 
	"BACKDATED_FLAG" CHAR(1 BYTE), 
	"NEFT_DOC_FLAG" CHAR(1 BYTE), 
	"TP_EXP" NUMBER(12,4), 
	"PREMIUM_TYPE_ID" NUMBER(5,0), 
	"NAME_IN_BANK" VARCHAR2(500 BYTE), 
	"ORIGINAL_TR_DT" DATE, 
	"IRDA_RM" VARCHAR2(10 BYTE), 
	"IRDA_BRANCH" VARCHAR2(10 BYTE), 
	"GI_REQUEST" VARCHAR2(10 BYTE), 
	"REQUEST_BY" VARCHAR2(10 BYTE), 
	"REQUEST_DATE" DATE, 
	"GI_REQUEST_STATUS" VARCHAR2(10 BYTE), 
	"REQUEST_STATUS_BY" VARCHAR2(10 BYTE), 
	"REQUEST_STATUS_DATE" DATE, 
	"REQUEST_REMARKS" VARCHAR2(50 BYTE), 
	"ISAPPROVALINITIATED" CHAR(1 BYTE), 
	"IS_RETIREMENT_PLANNING" CHAR(1 BYTE), 
	"PLAN_CREATION_DATE" DATE, 
	"RP_VERIFICATION_FLAG" CHAR(1 BYTE), 
	"RP_VERIFICATION_DATE" DATE, 
	"RP_VERIFIED_BY" VARCHAR2(10 BYTE), 
	"RP_REJECTION_STATUS" CHAR(1 BYTE), 
	"IS_INTERIM_APPROVED" CHAR(1 BYTE), 
	"LAST_INSURER" VARCHAR2(100 BYTE), 
	"LAST_POLICY_NO" VARCHAR2(50 BYTE), 
	"LAST_BROKER_NAME" VARCHAR2(100 BYTE), 
	"LAST_BROKER_CODE" VARCHAR2(100 BYTE), 
	"PLAN_NO" VARCHAR2(20 BYTE), 
	"ECS_TRANS" CHAR(1 BYTE), 
	"IS_PRE_RETIREMENT_PLANNING" CHAR(1 BYTE), 
	"FT_POLICY_NO" VARCHAR2(45 BYTE), 
	"FT_ISSUE_DATE" DATE, 
	"INTEREST_RATE" NUMBER(12,4), 
	"COMPANY_CD" VARCHAR2(10 BYTE), 
	"FUEL_ID" VARCHAR2(50 BYTE), 
	 PRIMARY KEY ("DOC_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "WEALTH"  ENABLE, 
	 CONSTRAINT "FK_CAMPAIGN_DOC" FOREIGN KEY ("CAMPAIGN_ID")
	  REFERENCES "WEALTHMAKER"."BAJAJ_CAMPAIGN" ("CAMPAIGN_ID") ENABLE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "WEALTH" 
   CACHE ;

  CREATE INDEX "WEALTHMAKER"."IND1_TB_DOC_UP" ON "WEALTHMAKER"."TB_DOC_UPLOAD" (LPAD("INV_CODE",8)) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "WEALTH" ;

  CREATE INDEX "WEALTHMAKER"."IND_AR_CODE_UPLOAD" ON "WEALTHMAKER"."TB_DOC_UPLOAD" ("AR_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "WEALTH" ;

  CREATE INDEX "WEALTHMAKER"."IND_BUSIBRANCH" ON "WEALTHMAKER"."TB_DOC_UPLOAD" ("BUSI_BRANCH_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "WEALTH" ;

  CREATE INDEX "WEALTHMAKER"."IND_CAMPID_TBDOC" ON "WEALTHMAKER"."TB_DOC_UPLOAD" ("CAMPAIGN_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "WEALTH" ;

  CREATE INDEX "WEALTHMAKER"."IND_DOCCOM" ON "WEALTHMAKER"."TB_DOC_UPLOAD" ("COMMON_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "WEALTH" ;

  CREATE INDEX "WEALTHMAKER"."IND_TB_DOC_INV_CODE" ON "WEALTHMAKER"."TB_DOC_UPLOAD" ("INV_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "WEALTH" ;

  CREATE INDEX "WEALTHMAKER"."IND_TB_DOC_UPD" ON "WEALTHMAKER"."TB_DOC_UPLOAD" ("WEALTHMAKER"."IDX_TIMESTAMP"("DOC_UPLOAD_DATE")) 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "WEALTH" ;

  CREATE INDEX "WEALTHMAKER"."IND_TB_DOC_UPLOAD_01" ON "WEALTHMAKER"."TB_DOC_UPLOAD" ("BUSI_TR_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "WEALTH" ;

  CREATE INDEX "WEALTHMAKER"."IND_TB_DOC_UPLOAD_PUNCH" ON "WEALTHMAKER"."TB_DOC_UPLOAD" ("PUNCHED_BY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "WEALTH" ;

  CREATE INDEX "WEALTHMAKER"."IND_TB_DOC_UPL_LST_POLICY" ON "WEALTHMAKER"."TB_DOC_UPLOAD" ("LAST_POLICY_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "WEALTH" ;

  CREATE INDEX "WEALTHMAKER"."INX_FT_ISSUE_DATE" ON "WEALTHMAKER"."TB_DOC_UPLOAD" ("FT_ISSUE_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "WEALTH" ;

  CREATE INDEX "WEALTHMAKER"."INX_TRAN_DMD_TYPE" ON "WEALTHMAKER"."TB_DOC_UPLOAD" ("TRAN_TYPE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "WEALTH" ;

  CREATE INDEX "WEALTHMAKER"."REFDTIND" ON "WEALTHMAKER"."TB_DOC_UPLOAD" ("REF_DT_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "WEALTH" ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "WEALTHMAKER"."TRG_LEAD_ID_UPDATE" 
BEFORE INSERT ON WEALTHMAKER.TB_DOC_UPLOAD
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN

   IF :NEW.LEAD_ID IS NOT NULL THEN
        UPDATE CLIENT_TEST T SET T.LEAD_ID=:NEW.LEAD_ID,T.LEAD_TYPE=:NEW.LEAD_TYPE WHERE CLIENT_CODEKYC=:NEW.INV_CODE;
        COMMIT;
   END IF;     
    
EXCEPTION WHEN OTHERS THEN
       RAISE;
END ;


/
ALTER TRIGGER "WEALTHMAKER"."TRG_LEAD_ID_UPDATE" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "WEALTHMAKER"."TRIG_INVDOC1" BEFORE UPDATE ON WEALTHMAKER.tb_doc_upload FOR EACH ROW
DECLARE
 last_user VARCHAR2(20);
 last_date DATE;
 USER_EXCEPTION EXCEPTION;
BEGIN

     IF :NEW.VERIFICATION_DATE IS NOT NULL THEN
     
       :NEW.TAT_VER:=TAT_CALC(:NEW.DOC_UPLOAD_DATE,:NEW.VERIFICATION_DATE)  ;  
        
      
        
     END IF;

     IF :NEW.PUNCHING_DATE IS NOT NULL THEN
     
       :NEW.TAT_PUNCH:=TAT_CALC(:NEW.VERIFICATION_DATE,:NEW.PUNCHING_DATE)  ;  
        
      
        
     END IF;
     
     IF :NEW.AUDIT_DATE IS NOT NULL THEN
     
       :NEW.TAT_AUDIT:=TAT_CALC(:NEW.PUNCHING_DATE,:NEW.AUDIT_DATE)  ;  
        
      
        
     END IF;
     
     
     IF :NEW.PUNCHING_DATE IS NOT NULL THEN
     
       :NEW.TAT_UP_PUNCH:=TAT_CALC(:NEW.DOC_UPLOAD_DATE,:NEW.PUNCHING_DATE)  ;  
        
      
        
     END IF;
     
     IF :NEW.AUDIT_DATE IS NOT NULL THEN
     
       :NEW.TAT_UP_AUDIT:=TAT_CALC(:NEW.DOC_UPLOAD_DATE,:NEW.AUDIT_DATE)  ; 
        
     END IF;
     
     IF(NVL(:OLD.REJECTION_STATUS,'1')<>NVL(:NEW.REJECTION_STATUS,'1')  AND :OLD.AR_CODE IS NOT NULL) THEN
        RAISE USER_EXCEPTION; 
     END IF;
EXCEPTION WHEN USER_EXCEPTION THEN
     RAISE_APPLICATION_ERROR (-20101,'Your can not reject or hold after punching.');
     RETURN;
END ;


/
ALTER TRIGGER "WEALTHMAKER"."TRIG_INVDOC1" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "WEALTHMAKER"."TRIG_INVDOC" AFTER UPDATE ON WEALTHMAKER.tb_doc_upload FOR EACH ROW
DECLARE
 last_user VARCHAR2(20);
 last_date DATE;
  pragma autonomous_transaction;
BEGIN



 IF :NEW.AUDIT_FLAG='1' AND :OLD.TRAN_TYPE='AC' THEN
 
  DELETE FROM tb_inv_latest_doc WHERE INV_CODE=:NEW.INV_CODE and tran_sub_type=:NEW.tran_sub_type;  
  commit;  
  insert into tb_inv_latest_doc(COMMON_ID,DOC_ID,DOC_FILENAME,DOC_PATH,BUSI_RM_CODE,BUSI_BRANCH_CODE,INV_CODE,TRAN_SUB_TYPE,TIMEST) values
  (:OLD.common_id,:OLD.Doc_id,:OLD.doc_filename,:OLD.doc_path,:old.busi_rm_code,:OLD.busi_branch_code,:OLD.inv_code,:OLD.tran_sub_type,sysdate);
  
  commit;
 
    
 END IF;
 
 
 
 IF :NEW.PUNCHING_FLAG='1' THEN
 
  update DMSREMARK_MASTER set PUNCH_REMARKS=null  WHERE COMMON_ID=:OLD.COMMON_ID and PUNCH_REMARKS IS NOT NULL;  
  commit;  
  
    
 END IF;

END trantemp_tr4; 


/
ALTER TRIGGER "WEALTHMAKER"."TRIG_INVDOC" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "WEALTHMAKER"."TB_DOC_UPLOAD_DEL_TR" 
BEFORE DELETE ON WEALTHMAKER.tb_doc_upload FOR EACH ROW
BEGIN
    INSERT INTO tb_doc_upload_DEL(COMMON_ID,DOC_ID,DOC_FILENAME,DOC_PATH,TRAN_TYPE,BUSI_RM_CODE,BUSI_BRANCH_CODE,BUSI_TR_DATE,INV_CODE,VERIFICATION_FLAG,PUNCHING_FLAG,      
                                  AUDIT_FLAG,REJECTION_STATUS,DOC_UPLOAD_DATE,VERIFICATION_DATE,PUNCHING_DATE,AUDIT_DATE,UPLOAD_BY,VERIFIED_BY,AUDIT_BY,PUNCHED_BY,         
                                  REMARK,SCH_CODE,TRAN_SUB_TYPE,DOC_ATTACHED,DIRECT_ANA,EXIST_CODE,EXPENSE,AR_CODE)
                           VALUES(:old.COMMON_ID,:old.DOC_ID,:old.DOC_FILENAME,:old.DOC_PATH,:old.TRAN_TYPE,:old.BUSI_RM_CODE,:old.BUSI_BRANCH_CODE,:old.BUSI_TR_DATE,:old.INV_CODE,:old.VERIFICATION_FLAG,:old.PUNCHING_FLAG,      
                                  :old.AUDIT_FLAG,:old.REJECTION_STATUS,:old.DOC_UPLOAD_DATE,:old.VERIFICATION_DATE,:old.PUNCHING_DATE,:old.AUDIT_DATE,:old.UPLOAD_BY,:old.VERIFIED_BY,:old.AUDIT_BY,:old.PUNCHED_BY,         
                                  :old.REMARK,:old.SCH_CODE,:old.TRAN_SUB_TYPE,:old.DOC_ATTACHED,:old.DIRECT_ANA,:old.EXIST_CODE,:old.EXPENSE,:old.AR_CODE);
END tb_doc_upload_DEL_TR; 


/
ALTER TRIGGER "WEALTHMAKER"."TB_DOC_UPLOAD_DEL_TR" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "WEALTHMAKER"."TBL_DOC_UP_ID" 
BEFORE INSERT
ON WEALTHMAKER.tb_doc_upload
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE
mid NUMBER;
BEGIN
  mid := 0;
   SELECT doc_id.nextval INTO mid FROM dual;
   :NEW.doc_id := mid;
   EXCEPTION
     WHEN OTHERS THEN
       RAISE;
END ; 


/
ALTER TRIGGER "WEALTHMAKER"."TBL_DOC_UP_ID" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "WEALTHMAKER"."TB_DOC_UPLOAD" 
AFTER  UPDATE ON WEALTHMAKER.TB_DOC_UPLOAD FOR EACH ROW
BEGIN
insert into dms_access_log( COMMON_ID,DOC_ID,machine_ip,MODULE,timest) 
values (:old.COMMON_id,:old.DOC_ID,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),sysdate);
END ; 


/
ALTER TRIGGER "WEALTHMAKER"."TB_DOC_UPLOAD" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "WEALTHMAKER"."HIS_TB_DOC_UPLOAD" 
AFTER  UPDATE ON WEALTHMAKER.TB_DOC_UPLOAD FOR EACH ROW
BEGIN
    IF (SYS_CONTEXT('USERENV','IP_ADDRESS')<>'192.168.0.1') THEN
        IF(:OLD.PUNCHING_FLAG<>:NEW.PUNCHING_FLAG) THEN
            INSERT INTO TB_DOC_UPLOAD_HIS(COMMON_ID,COLUMN_NAME,PREV_VALUE ,CURR_VALUE ,ADDRESS,MODULE,PROGRAM_NAME) VALUES 
            (:OLD.COMMON_ID,'PUNCHING_FLAG',:OLD.PUNCHING_FLAG,:NEW.PUNCHING_FLAG,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),SYS_CONTEXT('USERENV','ACTION'));
        END IF;
        
        IF(:OLD.VERIFICATION_FLAG<>:NEW.VERIFICATION_FLAG) THEN
            INSERT INTO TB_DOC_UPLOAD_HIS(COMMON_ID,COLUMN_NAME,PREV_VALUE ,CURR_VALUE ,ADDRESS,MODULE,PROGRAM_NAME) VALUES 
            (:OLD.COMMON_ID,'VERIFICATION_FLAG',:OLD.VERIFICATION_FLAG,:NEW.VERIFICATION_FLAG,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),SYS_CONTEXT('USERENV','ACTION'));
        END IF;
        
        IF(:OLD.AUDIT_FLAG<>:NEW.AUDIT_FLAG) THEN
                INSERT INTO TB_DOC_UPLOAD_HIS(COMMON_ID,COLUMN_NAME,PREV_VALUE ,CURR_VALUE ,ADDRESS,MODULE,PROGRAM_NAME) VALUES 
                (:OLD.COMMON_ID,'AUDIT_FLAG',:OLD.AUDIT_FLAG,:NEW.AUDIT_FLAG,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),SYS_CONTEXT('USERENV','ACTION'));
        END IF;

        IF(:OLD.REJECTION_STATUS<>:NEW.REJECTION_STATUS) THEN
            INSERT INTO TB_DOC_UPLOAD_HIS(COMMON_ID,COLUMN_NAME,PREV_VALUE ,CURR_VALUE ,ADDRESS,MODULE,PROGRAM_NAME) VALUES 
            (:OLD.COMMON_ID,'REJECTION_STATUS',:OLD.REJECTION_STATUS,:NEW.REJECTION_STATUS,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),SYS_CONTEXT('USERENV','ACTION'));
        END IF;

        IF(:OLD.EXPENSE<>:NEW.EXPENSE) THEN
            INSERT INTO TB_DOC_UPLOAD_HIS(COMMON_ID,COLUMN_NAME,PREV_VALUE ,CURR_VALUE ,ADDRESS,MODULE,PROGRAM_NAME) VALUES 
            (:OLD.COMMON_ID,'EXPENSE',:OLD.EXPENSE,:NEW.EXPENSE,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),SYS_CONTEXT('USERENV','ACTION'));
        END IF;

        IF(:OLD.PUNCHED_BY<>:NEW.PUNCHED_BY) THEN
            INSERT INTO TB_DOC_UPLOAD_HIS(COMMON_ID,COLUMN_NAME,PREV_VALUE ,CURR_VALUE ,ADDRESS,MODULE,PROGRAM_NAME) VALUES 
            (:OLD.COMMON_ID,'PUNCHED_BY',:OLD.PUNCHED_BY,:NEW.PUNCHED_BY,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),SYS_CONTEXT('USERENV','ACTION'));
        END IF;
        
        IF(:OLD.SENIOR_APPROVAL<>:NEW.SENIOR_APPROVAL) THEN
            INSERT INTO TB_DOC_UPLOAD_HIS(COMMON_ID,COLUMN_NAME,PREV_VALUE ,CURR_VALUE ,ADDRESS,MODULE,PROGRAM_NAME) VALUES 
            (:OLD.COMMON_ID,'SENIOR_APPROVAL',:OLD.SENIOR_APPROVAL,:NEW.SENIOR_APPROVAL,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),SYS_CONTEXT('USERENV','ACTION'));
        END IF;
        
        
        IF(:OLD.INV_CODE<>:NEW.INV_CODE) THEN
            INSERT INTO TB_DOC_UPLOAD_HIS(COMMON_ID,COLUMN_NAME,PREV_VALUE ,CURR_VALUE ,ADDRESS,MODULE,PROGRAM_NAME) VALUES 
            (:OLD.COMMON_ID,'INV_CODE',:OLD.INV_CODE,:NEW.INV_CODE,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),SYS_CONTEXT('USERENV','ACTION'));
        END IF;
        
        IF(:OLD.BUSI_RM_CODE<>:NEW.BUSI_RM_CODE) THEN
            INSERT INTO TB_DOC_UPLOAD_HIS(COMMON_ID,COLUMN_NAME,PREV_VALUE ,CURR_VALUE ,ADDRESS,MODULE,PROGRAM_NAME) VALUES 
            (:OLD.COMMON_ID,'BUSI_RM_CODE',:OLD.BUSI_RM_CODE,:NEW.BUSI_RM_CODE,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),SYS_CONTEXT('USERENV','ACTION'));
        END IF;
        
        IF(:OLD.BUSI_BRANCH_CODE<>:NEW.BUSI_BRANCH_CODE) THEN
            INSERT INTO TB_DOC_UPLOAD_HIS(COMMON_ID,COLUMN_NAME,PREV_VALUE ,CURR_VALUE ,ADDRESS,MODULE,PROGRAM_NAME) VALUES 
            (:OLD.COMMON_ID,'BUSI_BRANCH_CODE',:OLD.BUSI_BRANCH_CODE,:NEW.BUSI_BRANCH_CODE,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),SYS_CONTEXT('USERENV','ACTION'));
        END IF;
        
        IF (NVL(:OLD.RP_VERIFICATION_FLAG,'0')<>NVL(:NEW.RP_VERIFICATION_FLAG,'0')) THEN
            INSERT INTO TB_DOC_UPLOAD_HIS(COMMON_ID,COLUMN_NAME,PREV_VALUE ,CURR_VALUE ,ADDRESS,MODULE,PROGRAM_NAME) VALUES 
            (:OLD.COMMON_ID,'RP_VERIFICATION_FLAG',:OLD.RP_VERIFICATION_FLAG,:NEW.RP_VERIFICATION_FLAG,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),SYS_CONTEXT('USERENV','ACTION'));
        END IF;
        
        IF (NVL(:NEW.RP_VERIFICATION_DATE,TO_DATE('1/01/1800','DD/MM/RRRR'))<>NVL(:OLD.RP_VERIFICATION_DATE,TO_DATE('1/01/1800','DD/MM/RRRR')))  THEN
             INSERT INTO TB_DOC_UPLOAD_HIS(COMMON_ID,COLUMN_NAME,PREV_VALUE ,CURR_VALUE ,ADDRESS,MODULE,PROGRAM_NAME) VALUES 
            (:OLD.COMMON_ID,'RP_VERIFICATION_DATE',:OLD.RP_VERIFICATION_DATE,:NEW.RP_VERIFICATION_DATE,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),SYS_CONTEXT('USERENV','ACTION'));
        END IF;
        
        IF (NVL(:OLD.SCH_CODE,'0')<>NVL(:NEW.SCH_CODE,'0')) THEN
            INSERT INTO TB_DOC_UPLOAD_HIS(COMMON_ID,COLUMN_NAME,PREV_VALUE ,CURR_VALUE ,ADDRESS,MODULE,PROGRAM_NAME) VALUES 
            (:OLD.COMMON_ID,'SCH_CODE',:OLD.SCH_CODE,:NEW.SCH_CODE,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),SYS_CONTEXT('USERENV','ACTION'));
        END IF;
        
        IF  (NVL(:OLD.RP_REJECTION_STATUS,'0')<>NVL(:NEW.RP_REJECTION_STATUS,'0')) THEN
            INSERT INTO TB_DOC_UPLOAD_HIS(COMMON_ID,COLUMN_NAME,PREV_VALUE ,CURR_VALUE ,ADDRESS,MODULE,PROGRAM_NAME) VALUES 
            (:OLD.COMMON_ID,'RP_REJECTION_STATUS',:OLD.RP_REJECTION_STATUS,:NEW.RP_REJECTION_STATUS,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),SYS_CONTEXT('USERENV','ACTION'));
        END IF;
        
        
        IF(:OLD.RP_VERIFIED_BY<>:NEW.RP_VERIFIED_BY) THEN
            INSERT INTO TB_DOC_UPLOAD_HIS(COMMON_ID,COLUMN_NAME,PREV_VALUE ,CURR_VALUE ,ADDRESS,MODULE,PROGRAM_NAME) VALUES 
            (:OLD.COMMON_ID,'RP_VERIFIED_BY',:OLD.RP_VERIFIED_BY,:NEW.RP_VERIFIED_BY,SYS_CONTEXT('USERENV','IP_ADDRESS'),SYS_CONTEXT('USERENV','MODULE'),SYS_CONTEXT('USERENV','ACTION'));
        END IF;
        
    END IF;
END ;

/
ALTER TRIGGER "WEALTHMAKER"."HIS_TB_DOC_UPLOAD" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "WEALTHMAKER"."TRG_VALIDATE_PLAN_NO" BEFORE INSERT ON WEALTHMAKER.TB_DOC_UPLOAD
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
     IF :NEW.IS_PRE_RETIREMENT_PLANNING=1 AND :NEW.PLAN_NO IS NULL THEN
         RAISE_APPLICATION_ERROR (-20099,'It Is Pre-Retirement Planning Transaction , Plan_No Can Not Be Left Blank');    
     END IF;    
END ;

/
ALTER TRIGGER "WEALTHMAKER"."TRG_VALIDATE_PLAN_NO" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "WEALTHMAKER"."TBL_INTERSET_RATE_VALIDATION" 
BEFORE INSERT OR UPDATE ON WEALTHMAKER.TB_DOC_UPLOAD
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
    IF NVL(:NEW.INTEREST_RATE,0)>20 THEN
        RAISE_APPLICATION_ERROR (-20099,'Interest Rate Can Not Be Greater than 20'); 
    END IF;    
EXCEPTION WHEN OTHERS THEN
       RAISE;
END ;

/
ALTER TRIGGER "WEALTHMAKER"."TBL_INTERSET_RATE_VALIDATION" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "WEALTHMAKER"."TRG_OTHER_VERIFY" 
BEFORE UPDATE ON WEALTHMAKER.TB_DOC_UPLOAD
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    
    IF TRIM(:NEW.AR_CODE) IS NOT NULL AND :NEW.REJECTION_STATUS=1 THEN
        RAISE_APPLICATION_ERROR (-20087,'This ar can not be rejected');    
    END IF;
    
    IF :NEW.PUNCHED_BY IS NOT NULL THEN 
        IF :NEW.PUNCHED_BY='1' THEN
            RAISE_APPLICATION_ERROR (-20088,'PUNCHED_BY can not be set as 1');    
        END IF;
    END IF;

    IF :NEW.VERIFICATION_FLAG=1 AND :NEW.TRAN_TYPE='OTHER' THEN
        :NEW.PUNCHING_FLAG:=1;
        :NEW.AUDIT_FLAG:=1;
        :NEW.PUNCHING_DATE:=:NEW.VERIFICATION_DATE;
        :NEW.AUDIT_DATE:=:NEW.VERIFICATION_DATE;
        :NEW.AUDIT_BY:=:NEW.VERIFIED_BY;
        
        
        IF :NEW.TRAN_SUB_TYPE='MANDATE' THEN
            UPDATE INVESTOR_MASTER SET MANDATE_FLAG='Y' WHERE INV_CODE=:NEW.INV_CODE;
            UPDATE CLIENT_TEST SET MANDATE_FLAG='Y' WHERE CLIENT_CODEKYC=:NEW.INV_CODE;
        END IF;
        
        DELETE FROM TB_INV_LATEST_DOC WHERE INV_CODE=:NEW.INV_CODE AND TRAN_SUB_TYPE=:NEW.TRAN_SUB_TYPE;  
        
        COMMIT;  
        INSERT INTO TB_INV_LATEST_DOC(COMMON_ID,DOC_ID,DOC_FILENAME,DOC_PATH,BUSI_RM_CODE,BUSI_BRANCH_CODE,INV_CODE,TRAN_SUB_TYPE,TIMEST) VALUES
        (:OLD.COMMON_ID,:OLD.DOC_ID,:OLD.DOC_FILENAME,:OLD.DOC_PATH,:OLD.BUSI_RM_CODE,:OLD.BUSI_BRANCH_CODE,:OLD.INV_CODE,:OLD.TRAN_SUB_TYPE,SYSDATE);
          
        COMMIT;
    END IF;   
   
   
   
    IF :NEW.LEAD_ID IS NOT NULL THEN
        UPDATE CLIENT_TEST T SET T.LEAD_ID=:NEW.LEAD_ID,T.LEAD_TYPE=:NEW.LEAD_TYPE WHERE CLIENT_CODEKYC=:NEW.INV_CODE;
        COMMIT;
    END IF;     
    
    IF (:NEW.NEFT_DOC_FLAG =1 AND :NEW.NEFT_VERIFICATION_FLAG=1)  OR (:NEW.NEFT_DOC_FLAG IS NULL AND :NEW.PUNCHING_FLAG=1 AND :NEW.TRAN_TYPE='ANA' AND  :NEW.NEFT_VERIFICATION_FLAG=1 ) THEN
       DELETE FROM TB_INV_LATEST_DOC WHERE INV_CODE=:NEW.INV_CODE AND TRAN_SUB_TYPE=:NEW.TRAN_SUB_TYPE;  
        
       INSERT INTO TB_INV_LATEST_DOC(COMMON_ID,DOC_ID,DOC_FILENAME,DOC_PATH,BUSI_RM_CODE,BUSI_BRANCH_CODE,INV_CODE,TRAN_SUB_TYPE,TIMEST) VALUES
       (:OLD.COMMON_ID,:OLD.DOC_ID,:OLD.DOC_FILENAME,:OLD.DOC_PATH,:OLD.BUSI_RM_CODE,:OLD.BUSI_BRANCH_CODE,:OLD.INV_CODE,:OLD.TRAN_SUB_TYPE,SYSDATE);
           
       UPDATE AGENT_MASTER SET MODIFY_USER=:NEW.NEFT_VERIFICTATION_BY,MODIFY_DATE=SYSDATE,
       AGENT_NAME=NVL(:NEW.NAME_IN_BANK,AGENT_NAME),
       BANKID=NVL(:NEW.BANKID,BANKID),
       ACCNO=NVL(:NEW.ACCOUNT_NO,ACCNO),
       ACCTYPEID=NVL(:NEW.ACC_TYPE_ID,ACCTYPEID),
       IFSC_CODE=NVL(:NEW.IFSC_CODE,IFSC_CODE),
       NEFT_BANK_NAME= (SELECT BANK_NAME FROM ANA_BANK_MASTER WHERE BANK_ID=:NEW.BANKID AND ROWNUM=1),
       NAME_IN_BANK=UPPER(TRIM(NVL(:NEW.NAME_IN_BANK,NAME_IN_BANK))),
       BANK_BRANCH_NAME=NVL(:NEW.BANK_BRANCH_NAME,BANK_BRANCH_NAME),MOBILE=NVL(:NEW.MOBILE,MOBILE),EMAIL=NVL(:NEW.EMAIL,EMAIL) WHERE AGENT_CODE=:NEW.INV_CODE;
       COMMIT; 
    END IF;
   
EXCEPTION WHEN OTHERS THEN
    RAISE;
END;

/
ALTER TRIGGER "WEALTHMAKER"."TRG_OTHER_VERIFY" ENABLE;

