CREATE OR REPLACE PROCEDURE PSM_ACCESS_MASTER (
    P_LOGIN          IN VARCHAR2,
    P_ROLE           IN VARCHAR2,
    P_MODULE_ACTION  IN VARCHAR2,
    P_CURSOR         OUT SYS_REFCURSOR
)
AS
    V_HAS_ACCESS   NUMBER := 0;
    V_MESSAGE      VARCHAR2(200);
    V_VALID_ROLES  VARCHAR2(100);
BEGIN
    -- Define valid roles based on module action
    IF P_MODULE_ACTION = 'ao_approve' THEN
        V_VALID_ROLES := '212,22,218';   
    ELSIF P_MODULE_ACTION = 'ao_insert' THEN
        V_VALID_ROLES := '212';
    ELSIF P_MODULE_ACTION = 'ao_update' THEN
        V_VALID_ROLES := '212,218';          
    ELSIF P_MODULE_ACTION = 'ao_bss' THEN
        V_VALID_ROLES := '212,22'; 
    ELSIF P_MODULE_ACTION = 'nps_save' THEN
        V_VALID_ROLES := '212'; 
    ELSIF P_MODULE_ACTION = 'nps_update' THEN
        V_VALID_ROLES := '212'; 
    ELSE
        V_VALID_ROLES := '-1';          
    END IF;

    -- Check access from USERDETAILS_JI based on login ID and role
    SELECT COUNT(*) INTO V_HAS_ACCESS
    FROM USERDETAILS_JI 
    WHERE LOGIN_ID = P_LOGIN 
      AND ROLE_ID IN (
        SELECT COLUMN_VALUE 
        FROM TABLE(WEALTHMAKER.DATA_SPLIT(V_VALID_ROLES, ','))
      );

    -- Prepare message
    IF V_HAS_ACCESS > 0 THEN
        V_MESSAGE := 'You have ' || P_MODULE_ACTION || ' access with role ' || P_ROLE ;
    ELSE 
        V_MESSAGE := 'You do not have required role access';
    END IF;

    -- Return result
    OPEN P_CURSOR FOR
    SELECT 
        CASE WHEN V_HAS_ACCESS > 0 THEN 'true' ELSE 'false' END AS STATUS,
        V_MESSAGE AS MESSAGE
    FROM DUAL;

EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error in PSM_ACCESS_MASTER: ' || SQLERRM);
END PSM_ACCESS_MASTER;
