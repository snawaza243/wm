using Newtonsoft.Json;
using System;
using System.Data;
using System.Globalization;
using System.Runtime.Remoting.Channels;
using System.Text;
using System.Threading;
using System.Web;
using System.Web.Services;
using System.Web.UI;
using System.Web.UI.WebControls;
using WM.Controllers;
using WM.Models;

namespace WM.Masters
{
    public partial class sip_master_reconciliation : System.Web.UI.Page
    {
        // tr code
        string rtaSearchTrCodeValue1 = string.Empty;
        string rtaSearchTrSearchedRowValue1 = string.Empty;
        string rtaSearchRtaSearchedRowValue1 = string.Empty;
        string rtaSearchFromdtPrevValue1 = string.Empty;
        string rtaSearchTodtPrevValue1 = string.Empty;
        string rtaSearchBranchPrevValue1 = string.Empty;
        string rtaSearchAMCPrevValue1 = string.Empty;
        string rtaSearchRecoStatusPrevValue1 = string.Empty;
        string rtaSearchUnrecoStatusPrevValue1 = string.Empty;

        string rtaSearchChequeNoPrevValue1 = string.Empty;
        string rtaSearchInvestorNamePrevValue1 = string.Empty;
        string rtaSearchAmountPrevValue1 = string.Empty;
        string rtaSearchRemarkPrevValue1 = string.Empty;
        string rtaSearchTranTypePrevValue1 = string.Empty;

        // after serach the rta, on rta searched row cliekd

        string rtaRowDataRtaCode = string.Empty;
        string rtaRowDataAmount = string.Empty;
        string rtaRowDataIndexNumber = string.Empty;


        PsmController pc = new PsmController();
        protected void Page_Load(object sender, EventArgs e)
        {
            //Session["LoginId"] = "112650";
            //Session["roleId"] = "29";

            if (!IsPostBack)
            {

                FillChannelList();
                fillRegionList();
                fillBranchList("");
                //fillZoneList("");
                fillRMList();
                FillAMCList();
                // 

                dateFrom.Text = "01/06/2025";// DateTime.Now.ToString("dd/MM/yyyy");
                dateTo.Text = "10/06/2025";// DateTime.Now.ToString("dd/MM/yyyy");

            }
            else
            {
                rtaSearchTrCodeValue1 = hftran1stcode.Value;
                rtaSearchTrSearchedRowValue1 = hfSelectedRow.Value;
                rtaSearchRtaSearchedRowValue1 = hfrtaselectedrow.Value;
                rtaSearchFromdtPrevValue1 = dateFromRta.Text;
                rtaSearchTodtPrevValue1 = dateToRta.Text;
                rtaSearchBranchPrevValue1 = branchSelectrta.SelectedValue;
                rtaSearchAMCPrevValue1 = amcSelectrta.SelectedValue;

                if (RadioButton1.Checked)
                {
                    rtaSearchRecoStatusPrevValue1 = "Y"; // Reconciled
                    rtaSearchUnrecoStatusPrevValue1 = string.Empty; // Unreconciled
                }
                else if (RadioButton2.Checked)
                {
                    rtaSearchUnrecoStatusPrevValue1 = "Y"; // Reconciled
                    rtaSearchRecoStatusPrevValue1 = "N"; // Unreconciled
                }
                else
                {
                    pc.ShowAlert(this, "Please select a reconciliation status.");
                    return; // Exit if no radio button is selected
                }
                
                rtaSearchChequeNoPrevValue1 = chequeNo.Text;
                rtaSearchInvestorNamePrevValue1 = txtInvestorName.Text;
                rtaSearchAmountPrevValue1 = txtAmount.Text;
                rtaSearchRemarkPrevValue1 = remark.Text;
                rtaSearchTranTypePrevValue1 = RadioButtonList1.SelectedValue;


                rtaRowDataRtaCode = hfRtaRowRtaNumber.Value;
                rtaRowDataAmount = hfRtaRowAmount.Value;
                rtaRowDataIndexNumber = hfrtaselectedrow.Value;

                FocusTrSearchedOnRowByIndex();
                FocusRtaRowByIndex();
                //HandlePostbackArSearchRowClick();
                //HandlePostbackRTASearchRowClick();
            }
            //ToggleReconcileButton();



        }

        #region PRASHANT



        private void ToggleReconcileButton()
        {
            reconcileBtn.Enabled = GridRta.Rows.Count > 0;
        }

        #region btnReset_Click
        protected void btnReset_Click(object sender, EventArgs e)
        {
            ClearFields();
        }
        #endregion

        #region btnReset2_Click
        protected void btnReset2_Click(object sender, EventArgs e)
        {
            tarnCode.Text = string.Empty;
            tranCodeGrid.DataSource = null;
            tranCodeGrid.DataBind();

            // Reset DropDownLists
            amcSelectrta.SelectedIndex = 0;
            if (chequeNoSelect.Items.FindByValue("001") != null)
            {
                chequeNoSelect.SelectedValue = "001"; // Set default value as per your logic
            }

            fillBranchList("2");

            // Clear TextBoxes
            dateFromRta.Text = string.Empty;
            dateToRta.Text = string.Empty;
            chequeNo.Text = string.Empty;
            txtInvestorName.Text = string.Empty;
            txtAmount.Text = string.Empty;
            remark.Text = string.Empty;

            // Reset RadioButtons
            RadioButton1.Checked = false;
            RadioButton2.Checked = false;

            // Reset RadioButtonList
            RadioButtonList1.ClearSelection();

            // Optional: Clear GridView if needed
            GridRta.DataSource = null;
            GridRta.DataBind();
        }
        #endregion

        #region ClearFields
        private void ClearFields()
        {
            //// Reset DropDownLists to default selection
            //branchSelect.SelectedIndex = 0; // "Please Select Branch"
            //regionSelect.SelectedIndex = 0; // "Select Region"
            //zoneSelect.SelectedIndex = 0;   // "Select Zone"
            //rmSelect.SelectedIndex = 0;     // "Please Select RM"
            //channelSelect.SelectedIndex = 0; // Assuming the first item is the default
            amcSelect.SelectedIndex = 0;    // Assuming the first item is the default

            fillBranchList("1");

            fillRegionList();
            fillRMList();
            FillChannelList();

            zoneSelect.Items.Clear();

            // Reset Text Fields
            arNumber.Text = string.Empty;
            TextBox3.Text = string.Empty;
            folioNo.Text = string.Empty;
            pan.Text = string.Empty;
            clientCode.Text = string.Empty;
            sipStartDate.Text = string.Empty;
            tarnCode.Text = string.Empty;
            lblRowCount.Text = string.Empty;
            dateFrom.Text = string.Empty; dateTo.Text = string.Empty;

            // Reset Checkboxes
            pms.Checked = false;
            cob.Checked = false;

            // Reset Radio Buttons and Radio Button Lists
            RadioButtonList2.ClearSelection();
            // RadioButtonList2.Items.Clear();
            c.Checked = false;
            k.Checked = false;
            cCob.Checked = false;
            kCob.Checked = false;
            rblReconciliationType.ClearSelection();
            //  rblReconciliationType.Items.Clear();
            //op1.Checked = false;
            //op2.Checked = false;
            Option1Radio.Checked = false;

            // Clear GridView Data
            tableSearchResults.DataSource = null; // Remove any data bound to the GridView
            tableSearchResults.DataBind();        // Refresh the GridView to reflect changes
        }
        #endregion


        #region btnExit_Click
        protected void btnExit_Click(object sender, EventArgs e)
        {
            string loginId = Session["LoginId"]?.ToString();
            string roleId = Session["roleId"]?.ToString();
            Response.Redirect($"~/welcome?loginid={loginId}&roleid={roleId}");
        }
        #endregion



        #region fillBranchList
        private void fillBranchList(string check = "")
        {
            sip_master_reconciliationController controller = new sip_master_reconciliationController();
            DataTable dt = controller.GetBranchList();

            if (check == "1")
            {
                branchSelect.DataSource = dt;
                branchSelect.DataTextField = "branch_name";
                branchSelect.DataValueField = "branch_code";
                branchSelect.DataBind();
                branchSelect.Items.Insert(0, new ListItem("", ""));
            }
            else if (check == "2")
            {
                branchSelectrta.DataSource = dt;
                branchSelectrta.DataTextField = "branch_name";
                branchSelectrta.DataValueField = "branch_code";
                branchSelectrta.DataBind();

                branchSelectrta.Items.Insert(0, new ListItem("", ""));
            }
            else
            {
                branchSelect.DataSource = dt;
                branchSelect.DataTextField = "branch_name";
                branchSelect.DataValueField = "branch_code";
                branchSelect.DataBind();
                branchSelect.Items.Insert(0, new ListItem("", ""));

                branchSelectrta.DataSource = dt;
                branchSelectrta.DataTextField = "branch_name";
                branchSelectrta.DataValueField = "branch_code";
                branchSelectrta.DataBind();

                branchSelectrta.Items.Insert(0, new ListItem("", ""));

            }
        }
        #endregion

        #region fillRegionList
        private void fillRegionList(string regionName = "")
        {
            // Get the region list from the controller
            DataTable dt = new RegionZoneController().GetRegions(regionName);

            if (dt != null && dt.Rows.Count > 0)
            {
                // Set the data source for the DropDownList
                regionSelect.DataSource = dt;
                regionSelect.DataTextField = "REGION_NAME"; // Adjust according to your data field
                regionSelect.DataValueField = "REGION_ID";  // Adjust according to your data field
                regionSelect.DataBind();
            }
            else
            {
                // If no regions are found, you may want to clear the DropDownList
                regionSelect.Items.Clear();
            }

            // Optionally, add a default item like "Select Region"
            regionSelect.Items.Insert(0, new ListItem("", ""));
        }
        #endregion

        protected void ddlRegion_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedRegionId = regionSelect.SelectedValue;
            FillZoneList(selectedRegionId);
        }

        #region FillZoneList
        private void FillZoneList(string regionId)
        {
            // Assume branches are stored in a session or other variable
            //string branches = (string)Session["Branches"];

            // Get the zones list from the controller
            DataTable dt = new sip_master_reconciliationController().GetZonesByRegion(regionId);

            if (dt != null && dt.Rows.Count > 0)
            {
                // Clear existing items and set the data source for the DropDownList
                zoneSelect.DataSource = dt;
                zoneSelect.DataTextField = "ZONE_NAME";
                zoneSelect.DataValueField = "ZONE_ID";
                zoneSelect.DataBind();
            }
            else
            {
                // Clear the dropdown if no zones are found
                zoneSelect.Items.Clear();
            }

            zoneSelect.Items.Insert(0, new ListItem("", ""));
            zoneSelect.Items.Insert(1, new ListItem("All", ""));
        }
        #endregion

        protected void ddlzone_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedbranchbyzoneId = zoneSelect.SelectedValue;
            FillbranchbyzoneList(selectedbranchbyzoneId);
        }

        protected void FillbranchbyzoneList(string selectedbranchbyzoneId)
        {

            // Call the controller method to get branch details
            DataTable dt = new sip_master_reconciliationController().GetBranchbyzoneDetails(selectedbranchbyzoneId);

            branchSelect.DataSource = dt;
            branchSelect.DataTextField = "Branch_name";
            branchSelect.DataValueField = "Branch_code";
            branchSelect.DataBind();

            branchSelectrta.DataSource = dt;
            branchSelectrta.DataTextField = "Branch_name";
            branchSelectrta.DataValueField = "Branch_code";
            branchSelectrta.DataBind();

            branchSelect.Items.Insert(0, new ListItem("", ""));
            branchSelectrta.Items.Insert(0, new ListItem("", ""));

            branchSelect.Items.Insert(1, new ListItem("All", ""));
            branchSelectrta.Items.Insert(1, new ListItem("All", ""));

        }

        protected void ddlRmFill_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedItemSerial = branchSelect.SelectedValue;

            // Call the controller method to get branch details
            // DataTable dt = new MfManualReconciliationController().GetBranchDetails(selectedItemSerial);
            DataTable dt = new WM.Controllers.MfManualReconciliationController().GetRM(selectedItemSerial);
            rmSelect.DataSource = dt;
            rmSelect.DataTextField = "RM_NAME";
            rmSelect.DataValueField = "payroll_id";
            rmSelect.DataBind();
            rmSelect.Items.Insert(0, new ListItem("", ""));
            rmSelect.Items.Insert(1, new ListItem("All", ""));
        }



        #region fillRmList
        private void fillRMList()

        {
            DataTable dt = new WM.Controllers.EmployeeController().GetRM();
            //AddDefaultItemRM(dt);
            rmSelect.DataSource = dt;
            rmSelect.DataTextField = "RM_NAME";
            rmSelect.DataValueField = "RM_CODE";
            rmSelect.DataBind();

            rmSelect.Items.Insert(0, new ListItem("", ""));
        }

        #endregion



        #region FillChannelList
        private void FillChannelList()
        {
            // Get the list of Channels from the controller
            DataTable dt = new WM.Controllers.sip_master_reconciliationController().GetChannelList();


            // Bind the data to the DropDownList
            channelSelect.DataSource = dt;
            channelSelect.DataTextField = "itemname"; // Corresponding to itemname in the procedure
            channelSelect.DataValueField = "itemserialnumber";   // Corresponding to itemserialnumber in the procedure
            channelSelect.DataBind();
            channelSelect.Items.Insert(0, new ListItem("", ""));
        }
        #endregion

        protected void ddlBranchCategory_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedItemSerial = channelSelect.SelectedValue;

            // Call the controller method to get branch details
            DataTable dt = new sip_master_reconciliationController().GetBranchDetails(selectedItemSerial);

            branchSelect.DataSource = dt;
            branchSelect.DataTextField = "Branch_name";
            branchSelect.DataValueField = "Branch_code";
            branchSelect.DataBind();

            branchSelectrta.DataSource = dt;
            branchSelectrta.DataTextField = "Branch_name";
            branchSelectrta.DataValueField = "Branch_code";
            branchSelectrta.DataBind();

            branchSelect.Items.Insert(0, new ListItem("", ""));
            branchSelectrta.Items.Insert(0, new ListItem("", ""));

            branchSelect.Items.Insert(1, new ListItem("All", ""));
            branchSelectrta.Items.Insert(1, new ListItem("All", ""));


            DataTable rdt = new sip_master_reconciliationController().Getregionbychannel(selectedItemSerial);

            regionSelect.DataSource = rdt;
            regionSelect.DataTextField = "REGION_NAME"; // Adjust according to your data field
            regionSelect.DataValueField = "REGION_ID";  // Adjust according to your data field
            regionSelect.DataBind();

            regionSelect.Items.Insert(0, new ListItem("", ""));
            regionSelect.Items.Insert(1, new ListItem("All", ""));

            DataTable zdt = new sip_master_reconciliationController().Getzonebychannel(selectedItemSerial);

            zoneSelect.DataSource = zdt;
            zoneSelect.DataTextField = "ZONE_NAME"; // Adjust according to your data field
            zoneSelect.DataValueField = "ZONE_ID";  // Adjust according to your data field
            zoneSelect.DataBind();

            zoneSelect.Items.Insert(0, new ListItem("", ""));
            zoneSelect.Items.Insert(1, new ListItem("All", ""));


        }


        #region FillAMCList
        private void FillAMCList()
        {
            // Get the list of AMCs from the controller
            DataTable dt = new WM.Controllers.sip_master_reconciliationController().GetAMCList(); // Ensure you have the correct controller reference


            // Bind the data to the DropDownList
            amcSelect.DataSource = dt;
            amcSelect.DataTextField = "MUT_NAME"; // Corresponding to MUT_NAME in the procedure
            amcSelect.DataValueField = "MUT_CODE";   // Corresponding to MUT_CODE in the procedure
            amcSelect.DataBind();
            amcSelectrta.DataSource = dt;
            amcSelectrta.DataTextField = "MUT_NAME"; // Corresponding to MUT_NAME in the procedure
            amcSelectrta.DataValueField = "MUT_CODE";   // Corresponding to MUT_CODE in the procedure
            amcSelectrta.DataBind();

            amcSelect.Items.Insert(0, new ListItem("", ""));
            amcSelectrta.Items.Insert(0, new ListItem("", ""));
        }
        #endregion

        private string tranCodetra
        {
            get { return ViewState["tranCodetra"] as string ?? string.Empty; }
            set { ViewState["tranCodetra"] = value; }
        }

        private int SelectedRowIndex
        {
            get
            {
                return ViewState["SelectedRowIndex"] != null ? (int)ViewState["SelectedRowIndex"] : -1;
            }
            set
            {
                ViewState["SelectedRowIndex"] = value;
            }
        }

        #endregion

        #region AR SEARCH GRID

        protected void btnSearch_Click(object sender, EventArgs e)
        {
            try
            {
                tableSearchResults.DataSource = null;
                tableSearchResults.DataBind();
                btnReset2_Click(this, null);

                SipMasterModel searchModel = new SipMasterModel
                {
                    Channelid = decimal.TryParse(channelSelect.SelectedValue, out decimal result) ? result : (decimal?)null,
                    ARNumber = arNumber.Text,
                    Branch = branchSelect.SelectedValue,
                    Region = regionSelect.SelectedValue,
                    RM = rmSelect.SelectedValue,
                    Zone = zoneSelect.SelectedValue,
                    TranType = RadioButtonList2.SelectedValue,
                    ReconciliationStatus = rblReconciliationType.SelectedValue,
                    COB = cob.Checked ? "1" : null,
                    PMS = pms.Checked ? "1" : null,
                    DateFrom = pc.ParseDateWithParamEW(dateFrom.Text, arNumber.Text),
                    DateTo = pc.ParseDateWithParamEW(dateTo.Text, arNumber.Text),
                    AMC = amcSelect.SelectedValue
                };

                if (string.IsNullOrWhiteSpace(searchModel.ARNumber) &&
       string.IsNullOrWhiteSpace(searchModel.Branch) &&
       string.IsNullOrWhiteSpace(searchModel.Region) &&
       string.IsNullOrWhiteSpace(searchModel.RM) &&
       string.IsNullOrWhiteSpace(searchModel.Zone) &&
       string.IsNullOrWhiteSpace(searchModel.TranType) &&
       searchModel.DateFrom == null &&
       searchModel.DateTo == null &&
       string.IsNullOrWhiteSpace(searchModel.AMC))
                {
                    // Alert user if no criteria are provided
                    ScriptManager.RegisterStartupScript(this, GetType(), "alertMessage",
                        "alert('Please provide at least one search criterion.');", true);
                    return;
                }

                DataTable dt = new WM.Controllers.sip_master_reconciliationController().GetTransactions(searchModel);

                if (dt != null && dt.Rows.Count > 0)
                {
                    ViewState["TrSearchedData"] = dt;

                    tableSearchResults.Visible = true;
                    tableSearchResults.DataSource = dt;
                    tableSearchResults.DataBind();
                    tableSearchResults.Focus();
                    lblRowCount.Text = dt.Rows.Count.ToString();
                    btnExport.Enabled = true;
                }
                else
                {
                    ViewState["TrSearchedData"] = null;
                    tableSearchResults.Visible = false;
                    tableSearchResults.DataSource = null;
                    tableSearchResults.DataBind();
                    lblRowCount.Text = "0";
                    btnExport.Enabled = false;
                }


            }
            catch (Exception ex)
            {
                pc.ShowAlert(this, "Error: " + ex.Message);
                return;
            }
        }


        protected void chkSelect_CheckedChanged(object sender, EventArgs e)
        {
            try
            {

                btnReset2_Click(this, null);


                CheckBox chk = (CheckBox)sender;

                if (!chk.Checked)
                {
                    btnReset2_Click(this, null);
                    return;
                }
                GridViewRow row = (GridViewRow)chk.NamingContainer;

                // Uncheck others and reset their background
                foreach (GridViewRow r in tableSearchResults.Rows)
                {
                    if (r.RowType == DataControlRowType.DataRow)
                    {
                        CheckBox otherChk = (CheckBox)r.FindControl("chkSelect");
                        if (otherChk != null && r != row)
                        {
                            otherChk.Checked = false;
                            r.BackColor = System.Drawing.Color.White; // reset
                        }
                    }
                }

                foreach (GridViewRow r in tableSearchResults.Rows)
                {
                    if (r.RowType == DataControlRowType.DataRow && r != row)
                    {
                        r.CssClass = string.Empty; // Remove the class from other rows
                    }
                }


                row.BackColor = chk.Checked ? System.Drawing.Color.LightBlue : System.Drawing.Color.White;

                row.CssClass = chk.Checked ? "selected-row" : string.Empty;







                int rowIndex = row.RowIndex;


                // If your grid has a header, adjust the index to skip it
                if (tableSearchResults.HeaderRow != null && rowIndex >= 0)
                {
                    hfSelectedRow.Value = rowIndex.ToString();
                }
                SelectedRowIndex = row.RowIndex;

                tableSearchResults.Focus();

                // Get values from the selected row
                HiddenField hfTranCode = (HiddenField)row.FindControl("hfTranCode");
                string tranCodetrap = hfTranCode.Value;
                tranCodetra = tranCodetrap.ToString();

                string tranDateStr = ((Label)row.FindControl("lblTranDate")).Text;
                string tranType = ((Label)row.FindControl("lblTrnType")).Text;
                string investorName = ((Label)row.FindControl("lblInvestorName")).Text;
                string amcCode = ((Label)row.FindControl("lblAMC")).Text;
                string branch = ((Label)row.FindControl("lblbranchco")).Text;
                string amount = ((Label)row.FindControl("lblAmount")).Text;
                string chqno = ((Label)row.FindControl("lblChqNo")).Text;
                string registrar = ((Label)row.FindControl("lblregis")).Text;
                string cobfl = ((Label)row.FindControl("lblCOBFL")).Text;


                string remarkValue = ((Label)row.FindControl("lblRemark")).Text;


                if (registrar == "C" && cobfl == "0")
                {
                    c.Checked = true;  // Select "C"
                }
                else if (registrar == "K" && cobfl == "0")
                {
                    k.Checked = true;  // Select "K"
                }
                else if (registrar == "C" && cobfl == "1")
                {
                    cCob.Checked = true;  // Select "C COB"
                }
                else if (registrar == "K" && cobfl == "1")
                {
                    kCob.Checked = true;  // Select "K COB"
                }


                if (DateTime.TryParseExact(tranDateStr, "dd/MM/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime tranDate))
                {
                    // Calculate the "From" and "To" dates, safely adjusting the day if needed.
                    DateTime fromDate = tranDate.AddMonths(-1); // One month before
                    DateTime toDate = tranDate.AddMonths(1);    // One month after

                    // Ensure the day remains valid if the target month has fewer days.
                    fromDate = new DateTime(fromDate.Year, fromDate.Month, Math.Min(tranDate.Day, DateTime.DaysInMonth(fromDate.Year, fromDate.Month)));
                    toDate = new DateTime(toDate.Year, toDate.Month, Math.Min(tranDate.Day, DateTime.DaysInMonth(toDate.Year, toDate.Month)));

                    // Assign the formatted dates to the textboxes.
                    dateFromRta.Text = fromDate.ToString("dd/MM/yyyy");
                    dateToRta.Text = toDate.ToString("dd/MM/yyyy");
                }
                else
                {
                    // Handle invalid date parsing.
                    dateFromRta.Text = string.Empty;
                    dateToRta.Text = string.Empty;
                }


                rblReconciliationType.SelectedValue = tranType.ToLower() == "reconciled" ? "reconciled-rta" : "unreconciled-rta";
                amcSelectrta.SelectedValue = amcCode;
                //  branchSelectrta.SelectedValue = branch;
                txtAmount.Text = amount;
                txtInvestorName.Text = investorName;
                chequeNoSelect.SelectedValue = "001";
                chequeNo.Text = chqno;
                remark.Text = remarkValue;
                RadioButton2.Checked = true; // Set the "Unreconciled" radio button as checked
                row.Focus();
                UpdatePanelFirst.Update();

                return;

            }

            catch (Exception ex)
            {
                // Handle any unexpected errors
                // Optionally, log the error or display a message to the user
                Console.WriteLine($"Error: {ex.Message}");
            }
        }

        private void HandlePostbackArSearchRowClick()
        {
            string eventTarget = Request["__EVENTTARGET"];
            string eventArgument = Request["__EVENTARGUMENT"];

            System.Diagnostics.Debug.WriteLine($"EventTarget: {eventTarget}");
            System.Diagnostics.Debug.WriteLine($"EventArgument: {eventArgument}");
            System.Diagnostics.Debug.WriteLine($"GridView UniqueID: {tableSearchResults.UniqueID}");

            if (!string.IsNullOrEmpty(eventTarget) &&
                eventTarget.Equals(tableSearchResults.UniqueID, StringComparison.OrdinalIgnoreCase) &&
                !string.IsNullOrEmpty(eventArgument) &&
                eventArgument.StartsWith("RowDoubleClick:", StringComparison.OrdinalIgnoreCase)) // Changed to match your actual argument
            {
                int rowIndex = int.Parse(eventArgument.Split(':')[1]);
                //string tranCode = hftran1stcode.Value;
                //hftran1stcode.Value = rowIndex.ToString(); // Store the row index in the hidden field

                ProcessSelectedRow1(rowIndex);
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Postback condition not met");
            }
        }

        private void ProcessSelectedRow1(int rowIndex)
        {
            try
            {
                GridViewRow row = tableSearchResults.Rows[rowIndex];
                CheckBox chkSelect = (CheckBox)row.FindControl("chkSelect");

                if (chkSelect != null)
                {
                    // Check this checkbox
                    chkSelect.Checked = true;

                    // Uncheck all others manually (replicating logic)
                    foreach (GridViewRow r in tableSearchResults.Rows)
                    {
                        if (r.RowIndex != rowIndex && r.RowType == DataControlRowType.DataRow)
                        {
                            CheckBox otherChk = (CheckBox)r.FindControl("chkSelect");
                            if (otherChk != null)
                            {
                                otherChk.Checked = false;
                                r.BackColor = System.Drawing.Color.White;
                            }
                        }
                    }

                    row.BackColor = System.Drawing.Color.LightBlue;

                    // Now call the CheckedChanged handler manually
                    chkSelect_CheckedChanged(chkSelect, EventArgs.Empty);
                    pc.ShowAlert(this, "this is sample");
                }

                UpdatePanelFirst.Update();
            }
            catch (Exception ex)
            {
                // Log error
                Console.WriteLine($"ProcessSelectedRow1 error: {ex.Message}");
            }
        }


        #endregion

        #region rta SEARCH GRID

        protected void tableSearchResults_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                e.Row.Attributes["onclick"] = "onGridRowClick(this);";
                e.Row.Style["cursor"] = "pointer";

                // Add double click event to each row
                //e.Row.Attributes["ondblclick"] = "onRowDoubleClick(this)";
                //e.Row.Style["cursor"] = "pointer";

                // Find the checkbox control
                //CheckBox chkSelect = (CheckBox)e.Row.FindControl("chkSelect");
                //if (chkSelect != null)
                //{
                //    // Add client-side click handler to prevent event bubbling
                //    chkSelect.Attributes["onclick"] = "event.stopPropagation();";
                //}
            }
        }

        protected void tableSearchResults_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName == "RowDoubleClick")
            {
                string[] args = e.CommandArgument.ToString().Split(':');
                if (args.Length == 2 && args[0] == "RowDoubleClick")
                {
                    int rowIndex = Convert.ToInt32(args[1]);
                    hfSelectedRow.Value = rowIndex.ToString();
                    ProcessSelectedRow1(rowIndex);
                    UpdatePanelFirst.Update();
                }
            }
        }

        private void FocusRtaRowByIndex()
        {
            if (int.TryParse(hfrtaselectedrow.Value, out int selectedRowIndex))
            {
                if (selectedRowIndex >= 0 && selectedRowIndex < GridRta.Rows.Count)
                {
                    GridViewRow row = GridRta.Rows[selectedRowIndex];

                    CheckBox chk = (CheckBox)row.FindControl("chkSelect");
                    if (chk != null)
                    {
                        // Highlight the row
                        row.BackColor = System.Drawing.Color.LightBlue;

                        // Focus on the checkbox
                        chk.Focus();

                        // Smooth scroll to checkbox
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "scrollToRtaRow",
                            $"document.getElementById('{chk.ClientID}').scrollIntoView({{behavior: 'smooth'}});", true);

                    }
                }
            }
        }

        private void FocusTrSearchedOnRowByIndex()
        {
            if (int.TryParse(hfSelectedRow.Value, out int selectedRowIndex))
            {
                if (selectedRowIndex >= 0 && selectedRowIndex < tableSearchResults.Rows.Count)
                {
                    GridViewRow row = tableSearchResults.Rows[selectedRowIndex];

                    CheckBox chk = (CheckBox)row.FindControl("chkSelect");
                    if (chk != null)
                    {
                        // Highlight the row
                        row.BackColor = System.Drawing.Color.LightBlue;

                        // Focus on the checkbox
                        chk.Focus();

                        // Smooth scroll to checkbox
                        ScriptManager.RegisterStartupScript(this, this.GetType(), "scrollToRow",
                            $"document.getElementById('{chk.ClientID}').scrollIntoView({{behavior: 'smooth'}});", true);

                        // Optional: show debug info
                        //pc.ShowAlert(this, $"Focused on row index: {selectedRowIndex}");
                    }
                }
            }
        }

        public void setRtaSetRdb(string rdbValue, string rdbText)
        {
            // Clear all first to avoid multiple selections
            rtaChequeNo.Checked = false;
            rtaFolioNo.Checked = false;
            rtaAppNo.Checked = false;
            rtaPanno.Checked = false;
            rtaBrokerId.Checked = false;

            switch (rdbValue)
            {
                case "001":
                    rtaChequeNo.Checked = true;
                    break;
                case "002":
                    rtaFolioNo.Checked = true;
                    break;
                case "003":
                    rtaAppNo.Checked = true;
                    break;
                case "004":
                    rtaPanno.Checked = true;
                    break;
                case "005":
                    rtaBrokerId.Checked = true;
                    break;
                default:
                    // Optionally show an alert or handle unexpected value
                    pc.ShowAlert(this, "Unknown search type: " + rdbText);
                    break;
            }
        }

        public static void SetRtaRecoUnreco(string reco, string unreco)
        {
            try
            {
               
            }
            catch { }
        }

        // BTN SEARCH RTA SERACH RTA FIND BTN RTA FIND BTN RTA SEARCH
        protected void btnSearchrta_Click(object sender, EventArgs e)
        {
            try
            {
                FocusTrSearchedOnRowByIndex();

                string rtaSearchFromdtPrevValue = dateFromRta.Text;
                string rtaSearchTodtPrevValue = dateToRta.Text;
                string rtaSearchChequeNoPrevValue = chequeNo.Text;  
                string rtaSearchInvestorNamePrevValue = txtInvestorName.Text;
                string rtaSearchAmountPrevValue = txtAmount.Text;
                string rtaSearchCrtTranCode = hftran1stcode.Value;
                string rtaSearchRecoStatus = RadioButton1.Checked ? "Y" : (RadioButton2.Checked ? "N" : null);

                string crtTranCode = hftran1stcode.Value;
                string reconciliationStatus = RadioButton1.Checked ? "Y" : (RadioButton2.Checked ? "N" : null);

                #region new hidden
                // Read hidden field values from the page
                string hdfSearchedCheque_value = hdfSearchedCheque.Value;
                string hdfSearchedFilio_value = hdfSearchedFilio.Value;
                string hdfSearchedApp_value = hdfSearchedApp.Value;
                string hdfSearchedPan_value = hdfSearchedPan.Value;
                string hdfSearchedBroker_value = hdfSearchedBroker.Value;
                string crtRtaFindDdl = string.Empty;    
                string crtRtaFindValue = string.Empty;

            

              
                #region bew chekc definition
                if (rtaChequeNo.Checked)
                {
                    crtRtaFindDdl = "001"; // CHEQUE_NO
                    crtRtaFindValue = hdfSearchedCheque_value;
                }
                else if (rtaFolioNo.Checked)
                {
                    crtRtaFindDdl = "002"; // FOLIO_NO
                    crtRtaFindValue = hdfSearchedFilio_value;
                }
                else if (rtaAppNo.Checked)
                {
                    crtRtaFindDdl = "003"; // APP_NO
                    crtRtaFindValue = hdfSearchedApp_value;
                }
                else if (rtaPanno.Checked)
                {
                    crtRtaFindDdl = "004"; // PANNO
                    crtRtaFindValue = hdfSearchedPan_value;
                }
                else if (rtaBrokerId.Checked)
                {
                    crtRtaFindDdl = "005"; // BROKER_ID
                    crtRtaFindValue = hdfSearchedBroker_value;
                }
                else
                {
                    // No checkbox is checked, handle accordingly
                    pc.ShowAlert(this, "Please select a search criterion.");
                    return;
                }

                if (string.IsNullOrEmpty(crtRtaFindDdl) || string.IsNullOrEmpty(crtRtaFindValue) || string.IsNullOrEmpty(rtaSearchTrCodeValue1) )
                {
                    pc.ShowAlert(this, "Please select a valid search criterion.");
                    return;
                }

                #endregion


                #endregion

                SipMasterModel searchModel = new SipMasterModel
                {
                    Branch = rtaSearchBranchPrevValue1,
                    AMC = rtaSearchAMCPrevValue1,
                    ReconciliationStatus = rtaSearchRecoStatusPrevValue1,
                    DateFrom = PsmController.ParseNullableDateEW(rtaSearchFromdtPrevValue1),
                    DateTo = PsmController.ParseNullableDateEW(rtaSearchTodtPrevValue),
                    TranType = rtaSearchTranTypePrevValue1,
                    ChequeNo = crtRtaFindDdl,
                    InvestorName = rtaSearchInvestorNamePrevValue1,
                    Amount = PsmController.ParseNullableDecimal(rtaSearchAmountPrevValue1),
                    docNo = crtRtaFindValue
                };

                // Validate that at least one search criterion is provided
                if (string.IsNullOrWhiteSpace(searchModel.Branch) &&
                    string.IsNullOrWhiteSpace(searchModel.AMC) &&
                    searchModel.DateFrom == null &&
                    searchModel.DateTo == null &&
                    string.IsNullOrWhiteSpace(searchModel.ChequeNo) &&
                    string.IsNullOrWhiteSpace(searchModel.InvestorName) &&
                    searchModel.Amount == null &&
                    string.IsNullOrWhiteSpace(searchModel.docNo))
                {
                    // Display an alert if no criteria are provided
                    ScriptManager.RegisterStartupScript(this, GetType(), "alertMessage",
                        "alert('Please provide at least one search criterion.');", true);
                    return;
                }
                
                DataTable transactions = new WM.Controllers.sip_master_reconciliationController().GetTransactionsRta(searchModel);
                // bind the dt with erro handling
                // set agaitn the store field valeu to the same fiels
                dateFromRta.Text = rtaSearchFromdtPrevValue1;
                dateToRta.Text = rtaSearchTodtPrevValue1;
                amcSelectrta.SelectedValue = rtaSearchAMCPrevValue1;
                branchSelectrta.SelectedValue = rtaSearchBranchPrevValue1;
                chequeNo.Text = crtRtaFindValue;
                txtInvestorName.Text = rtaSearchInvestorNamePrevValue1;
                txtAmount.Text = rtaSearchAmountPrevValue1;
                remark.Text = rtaSearchRemarkPrevValue1;
                RadioButton1.Checked = rtaSearchRecoStatusPrevValue1 == "Y";
                RadioButton2.Checked = rtaSearchRecoStatusPrevValue1 == "N";
                RadioButtonList1.SelectedValue = rtaSearchTranTypePrevValue1; // Assuming this is the correct field for transaction type
                // trantype release



                setRtaSetRdb(crtRtaFindDdl, crtRtaFindValue);

                 

                if (transactions.Rows.Count >0)
                {
                    GridRta.Visible = true;
                    GridRta.DataSource = transactions;
                    GridRta.DataBind();
                }
                else
                {
                    GridRta.Visible = false;
                    GridRta.DataSource = null;
                    GridRta.DataBind();
                    pc.ShowAlert(this, "No records found for the given search criteria.");
                }
                FocusTrSearchedOnRowByIndex();






            }
            catch (Exception ex)
            {
                pc.ShowAlert(this, ex.Message);
            }
        }


       public static DateTime? ParseDateIfValidAr(string dateStr, string arNumber)
        {
            if (string.IsNullOrEmpty(dateStr) || !string.IsNullOrEmpty(arNumber))
            {
                return null;
            }

            if (DateTime.TryParseExact(
                dateStr,
                "dd/MM/yyyy",
                System.Globalization.CultureInfo.InvariantCulture,
                System.Globalization.DateTimeStyles.None,
                out DateTime parsedDate))
            {
                return parsedDate;
            }

            return null;
        }

        public static DateTime? ParseDateExactOrNull(string dateStr)
        {
            if (string.IsNullOrEmpty(dateStr))
            {
                return null;
            }

            return DateTime.ParseExact(
                dateStr,
                "dd/MM/yyyy",
                System.Globalization.CultureInfo.InvariantCulture
            );
        }

        [WebMethod]
        protected static string  WebMeth1_TrSearch(string channelSelect, string arNumber, string branchSelect, string regionSelect, string rmSelect, string zoneSelect, string dateFrom, string dateTo, string amcSelect, string tranTyepRdb, string recoStatus, string cob, string pms )
        { 
                SipMasterModel searchModel = new SipMasterModel
                {
                    Channelid = decimal.TryParse(channelSelect, out decimal result) ? result : (decimal?)null,
                    ARNumber = arNumber,
                    Branch = branchSelect,
                    Region = regionSelect,
                    RM = rmSelect,
                    Zone = zoneSelect,
                    TranType = tranTyepRdb,
                    ReconciliationStatus = recoStatus,
                    COB = cob,
                    PMS = pms,
                    DateFrom = ParseDateIfValidAr(dateFrom, arNumber),
                    DateTo = ParseDateIfValidAr(dateTo, arNumber),
                    AMC = amcSelect
                };
                var searchResult = new WM.Controllers.sip_master_reconciliationController().GetTransactions(searchModel);
                return JsonConvert.SerializeObject(new { data = searchResult }, Formatting.None);
        }

        [WebMethod]
        public static string WebMeth2_RTASearch(string traBranchValue, string traAMCVlaue, string rtaRecoStatus, string rtaFromDt, string rtaToDt, string rtaTranTypeRdb, string rtaChkValue, string rtaChkText, string rtaInvName, string rtaAmount)
        {
            // btnSearchrta_Click
            string returnValue = string.Empty;
            SipMasterModel searchModel = new SipMasterModel
            {
                Branch = traBranchValue,
                AMC = traAMCVlaue,
                ReconciliationStatus = rtaRecoStatus,
                DateFrom = ParseDateExactOrNull(rtaFromDt),
                DateTo = ParseDateExactOrNull(rtaToDt),
                TranType = rtaTranTypeRdb,
                ChequeNo = rtaChkValue,
                InvestorName = rtaInvName,
                Amount = string.IsNullOrEmpty(rtaAmount) ? (decimal?)null : decimal.Parse(rtaAmount),
                docNo = rtaChkText
            };

            if (string.IsNullOrWhiteSpace(searchModel.Branch) &&
                string.IsNullOrWhiteSpace(searchModel.AMC) &&
                searchModel.DateFrom == null &&
                searchModel.DateTo == null &&
                string.IsNullOrWhiteSpace(searchModel.ChequeNo) &&
                string.IsNullOrWhiteSpace(searchModel.InvestorName) &&
                searchModel.Amount == null &&
                string.IsNullOrWhiteSpace(searchModel.docNo))
            {
                returnValue = "Please provide at least one search criterion";
            }

            var searchResult = new WM.Controllers.sip_master_reconciliationController().GetTransactionsRta(searchModel);
            return (string.IsNullOrEmpty(returnValue) ? returnValue : JsonConvert.SerializeObject(new { data = searchResult }, Formatting.None));
        }


        protected void chkSelectrta_CheckedChanged(object sender, EventArgs e)
        {
            // Find the row where the checkbox is checked
            CheckBox chk = (CheckBox)sender;
            GridViewRow row = (GridViewRow)chk.NamingContainer;


            // Uncheck others and reset their background
            foreach (GridViewRow r in GridRta.Rows)
            {
                if (r.RowType == DataControlRowType.DataRow)
                {
                    CheckBox otherChk = (CheckBox)r.FindControl("chkSelect");
                    if (otherChk != null && r != row)
                    {
                        otherChk.Checked = false;
                        r.BackColor = System.Drawing.Color.White; // reset
                        chk.Focus();

                        ScriptManager.RegisterStartupScript(this, this.GetType(), "scrollToRow2",
                            $"document.getElementById('{chk.ClientID}').scrollIntoView({{behavior: 'smooth'}});", true);

                    }
                }
            }

            foreach (GridViewRow r in GridRta.Rows)
            {
                if (r.RowType == DataControlRowType.DataRow && r != row)
                {
                    r.CssClass = string.Empty; // Remove the class from other rows
                }
            }


            row.BackColor = chk.Checked ? System.Drawing.Color.LightBlue : System.Drawing.Color.White;

            row.CssClass = chk.Checked ? "selected-row" : string.Empty;




            // Get values from the selected row
            HiddenField hfTranCoderta = (HiddenField)row.FindControl("hfTranCoderta");
            string tranCodertap = hfTranCoderta.Value;
            tranCoderta = tranCodertap.ToString();

            string amrta = ((Label)row.FindControl("lblmount")).Text;
            amrtaparsed = decimal.Parse(((Label)row.FindControl("lblmount")).Text);

            RadioButton2.Checked = true; // Set the "Unreconciled" radio button as checked

            FocusTrSearchedOnRowByIndex();
        }

        private void HandlePostbackRTASearchRowClick()
        {
            string eventTarget = Request["__EVENTTARGET"];
            string eventArgument = Request["__EVENTARGUMENT"];

            System.Diagnostics.Debug.WriteLine($"EventTarget: {eventTarget}");
            System.Diagnostics.Debug.WriteLine($"EventArgument: {eventArgument}");
            System.Diagnostics.Debug.WriteLine($"GridView UniqueID: {GridRta.UniqueID}");

            if (!string.IsNullOrEmpty(eventTarget) &&
                eventTarget.Equals(GridRta.UniqueID, StringComparison.OrdinalIgnoreCase) &&
                !string.IsNullOrEmpty(eventArgument) &&
                eventArgument.StartsWith("RowDoubleClick:", StringComparison.OrdinalIgnoreCase)) // Changed to match your actual argument
            {
                int rowIndex = int.Parse(eventArgument.Split(':')[1]);
                //string tranCode = hftran1stcode.Value;
                //hftran1stcode.Value = rowIndex.ToString(); // Store the row index in the hidden field

                ProcessSelectedRow2(rowIndex);
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Postback condition not met");
            }
        }

        private void ProcessSelectedRow2(int rowIndex)
        {
            try
            {
                GridViewRow row = tableSearchResults.Rows[rowIndex];
                CheckBox chkSelect = (CheckBox)row.FindControl("chkSelect");

                if (chkSelect != null)
                {
                    // Check this checkbox
                    chkSelect.Checked = true;

                    // Uncheck all others manually (replicating logic)
                    foreach (GridViewRow r in tableSearchResults.Rows)
                    {
                        if (r.RowIndex != rowIndex && r.RowType == DataControlRowType.DataRow)
                        {
                            CheckBox otherChk = (CheckBox)r.FindControl("chkSelect");
                            if (otherChk != null)
                            {
                                otherChk.Checked = false;
                                r.BackColor = System.Drawing.Color.White;
                            }
                        }
                    }

                    row.BackColor = System.Drawing.Color.LightBlue;

                    // Now call the CheckedChanged handler manually
                    chkSelectrta_CheckedChanged(chkSelect, EventArgs.Empty);
                     
                }

                UpdatePanelFirst.Update();
            }
            catch (Exception ex)
            {
                // Log error
                Console.WriteLine($"ProcessSelectedRow1 error: {ex.Message}");
            }
        }

        protected void GridRta_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                e.Row.Attributes["onclick"] = "onGridRowClickRta(this);";
                e.Row.Style["cursor"] = "pointer";
            }

            /* old method
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                // Add double click event to each row
                e.Row.Attributes["ondblclick"] = "onRowDoubleClick2(this)";
                e.Row.Style["cursor"] = "pointer";

                // Find the checkbox control
                CheckBox chkSelect = (CheckBox)e.Row.FindControl("chkSelect");
                if (chkSelect != null)
                {
                    // Add client-side click handler to prevent event bubbling
                    chkSelect.Attributes["onclick"] = "event.stopPropagation();";
                }
            }*/
        }

        protected void GridRta_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName == "RowDoubleClick")
            {
                //string[] args = e.CommandArgument.ToString().Split(':');
                //if (args.Length == 2 && args[0] == "RowDoubleClick")
                //{
                //    int rowIndex = Convert.ToInt32(args[1]);
                //    hfSelectedRow.Value = rowIndex.ToString();
                //    ProcessSelectedRow1(rowIndex);
                //    UpdatePanelFirst.Update();
                //}
            }
        }

        #endregion
     
        #region EXPORT

        // rta serached list export
        protected void btnExport_Click(object sender, EventArgs e)
        {
            
        }

        public void ExportTrListToExcel1()
        {
            try
            {
                // Clear any previous content and headers
                Response.Clear();
                Response.Buffer = true;

                // Set the response type to Excel
                Response.AddHeader("content-disposition", "attachment;filename=SipMasterData.xls");
                Response.Charset = "";
                Response.ContentType = "application/vnd.ms-excel";

                // Hide the CheckBox column during export (optional, if needed)
                GridRta.Columns[0].Visible = false; // Adjust column index based on CheckBox location

                // Use a StringWriter and HtmlTextWriter to write the GridView data
                using (System.IO.StringWriter sw = new System.IO.StringWriter())
                {
                    using (HtmlTextWriter hw = new HtmlTextWriter(sw))
                    {
                        // Remove paging to export all data
                        GridRta.AllowPaging = false;

                        // Optionally rebind data if needed
                        // BindGridData();

                        // Render the GridTransaction content
                        GridRta.RenderControl(hw);

                        // Output the rendered HTML as Excel-compatible content
                        string excelData = sw.ToString();
                        Response.Output.Write(excelData);
                        Response.Flush();
                        Response.End();
                    }
                }

                // Re-show the CheckBox column after export (optional)
                GridRta.Columns[0].Visible = true;

                // Optionally re-enable paging if it was enabled before
                GridRta.AllowPaging = true;
                // Rebind data if needed to show paginated data again
                // BindGridData();
            }
            catch (Exception ex)
            {
                pc.ShowAlert(this, "Error exporting data: " + ex.Message);
                return;
            }
        }
        

        // tr search list export
        protected void btnExport1_Click(object sender, EventArgs e)
        {
            try
            {
                // in this view my exporitng dat aexist ViewState["TrSearchedData"] = dt;
                DataTable dt = ViewState["TrSearchedData"] as DataTable;
                if (dt == null || dt.Rows.Count == 0)
                {
                    pc.ShowAlert(this, "No data available to export.");
                    return;
                }
                else
                {
                    pc.ShowAlert(this, "Before export.");

                    pc.ExportToExcelByDT2(dt,"TR_Data_Exported");
                    pc.ShowAlert(this, "after export.");

                    // Register the script to stop the loader animation explicitly
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "stopLoader", "stopLoader();", true);

                    return;
                }
            }
            catch (ThreadAbortException te)
            {
                pc.ShowAlert(this, "Error exporting data: " + te.Message);
                return;
            }
            
        }

        public void ExportToCsvExcel(System.Data.DataTable dt, string fileName = "exported_file.xls")
        {
            // Start building the XML for the Excel file
            StringBuilder excelXml = new StringBuilder();

            // XML headers and workbook declaration
            excelXml.AppendLine("<?xml version=\"1.0\"?>");
            excelXml.AppendLine("<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\"");
            excelXml.AppendLine(" xmlns:o=\"urn:schemas-microsoft-com:office:office\"");
            excelXml.AppendLine(" xmlns:x=\"urn:schemas-microsoft-com:office:excel\"");
            excelXml.AppendLine(" xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\">");

            // Start worksheet
            excelXml.AppendLine("<Worksheet ss:Name=\"Sheet1\">");
            excelXml.AppendLine("<Table>");

            // Add the header row
            excelXml.AppendLine("<Row>");
            foreach (DataColumn column in dt.Columns)
            {
                excelXml.AppendLine($"<Cell><Data ss:Type=\"String\">{column.ColumnName}</Data></Cell>");
            }
            excelXml.AppendLine("</Row>");

            // Add the data rows
            foreach (DataRow row in dt.Rows)
            {
                excelXml.AppendLine("<Row>");
                foreach (DataColumn column in dt.Columns)
                {
                    excelXml.AppendLine($"<Cell><Data ss:Type=\"String\">{row[column].ToString()}</Data></Cell>");
                }
                excelXml.AppendLine("</Row>");
            }

            // Close table and worksheet
            excelXml.AppendLine("</Table>");
            excelXml.AppendLine("</Worksheet>");

            // Close workbook
            excelXml.AppendLine("</Workbook>");

            // Convert to bytes
            byte[] excelBytes = Encoding.UTF8.GetBytes(excelXml.ToString());

            // Send the file to the client
            HttpContext.Current.Response.Clear();
            HttpContext.Current.Response.Buffer = true;
            // file name take form from a varibaer

            HttpContext.Current.Response.AddHeader("content-disposition", $"attachment;filename={fileName}");
            HttpContext.Current.Response.ContentType = "application/vnd.ms-excel"; // Excel 2003 XML format
            HttpContext.Current.Response.OutputStream.Write(excelBytes, 0, excelBytes.Length);
            HttpContext.Current.Response.Flush();
            HttpContext.Current.Response.End();
            //HttpContext.Current.ApplicationInstance.CompleteRequest();

        }


        public void ExportRtaListExcel1()
        {
            // Clear any previous content and headers
            Response.Clear();
            Response.Buffer = true;

            // Set the response type to Excel
            Response.AddHeader("content-disposition", "attachment;filename=WealthmakerSIPData.xls");
            Response.Charset = "";
            Response.ContentType = "application/vnd.ms-excel";

            // Hide the CheckBox column during export
            tableSearchResults.Columns[0].Visible = false;  // Assuming the CheckBox is in the first column (index 0)

            // Use a StringWriter and HtmlTextWriter to write the GridView data
            using (System.IO.StringWriter sw = new System.IO.StringWriter())
            {
                using (HtmlTextWriter hw = new HtmlTextWriter(sw))
                {
                    // Remove paging to export all data
                    tableSearchResults.AllowPaging = false;

                    // Optionally rebind data if needed
                    // BindGridData();

                    // Render the GridView content
                    tableSearchResults.RenderControl(hw);

                    // Output the rendered HTML as Excel-compatible content
                    string excelData = sw.ToString();
                    Response.Output.Write(excelData);
                    Response.Flush();
                    Response.End();
                }
            }

            // Re-show the CheckBox column after export
            tableSearchResults.Columns[0].Visible = true;
        }
        
        
        
        #endregion

        #region OTHERS

        protected void ddlChequeNo_SelectedIndexChanged(object sender, EventArgs e)
        {
            // Check if a row has been selected
            if (SelectedRowIndex >= 0 && SelectedRowIndex < tableSearchResults.Rows.Count)
            {
                // Get the selected GridViewRow
                GridViewRow row = tableSearchResults.Rows[SelectedRowIndex];

                // Get the selected field from the DropDownList
                string selectedField = chequeNoSelect.SelectedItem.ToString();

                // Retrieve the value for the selected field
                string fieldValue = string.Empty;
                switch (selectedField)
                {
                    case "CHEQUE_NO":
                        fieldValue = ((Label)row.FindControl("lblChqNo")).Text;
                        break;
                    case "FOLIO_NO":
                        fieldValue = ((Label)row.FindControl("lblFolioNo")).Text;
                        break;
                    case "APP_NO":
                        fieldValue = ((Label)row.FindControl("lblAppNoModify")).Text;
                        break;
                    case "PANNO":
                        fieldValue = ((Label)row.FindControl("lblpanNo")).Text;
                        break;
                    case "BROKER_ID":
                        fieldValue = ((Label)row.FindControl("lblbrokerCode")).Text;
                        break;
                    default:
                        fieldValue = string.Empty;
                        break;
                }

                // Set the retrieved value in the TextBox
                chequeNo.Text = fieldValue;
            }
            else
            {
                chequeNo.Text = "Please select a row first.";
            }
        }


        public override void VerifyRenderingInServerForm(Control control)
        {
            // Required for rendering GridView in an Excel-friendly format
        }


       


        protected void btnSearchsip_Click(object sender, EventArgs e)
        {
            SipMasterModel searchModel = new SipMasterModel
            {
                FolioNo = string.IsNullOrEmpty(folioNo.Text) ? (string)null : folioNo.Text,
                Amount = string.IsNullOrEmpty(TextBox3.Text) ? (decimal?)null : decimal.Parse(TextBox3.Text),
                PAN = string.IsNullOrEmpty(pan.Text) ? (string)null : pan.Text,
                ClientCode = string.IsNullOrEmpty(clientCode.Text) ? (string)null : clientCode.Text,
                SIPStartDate = string.IsNullOrEmpty(sipStartDate.Text) ? (System.DateTime?)null : System.DateTime.ParseExact(sipStartDate.Text, "dd/MM/yyyy", null)
            };

            DataTable transactions = new WM.Controllers.sip_master_reconciliationController().GetTransactionsSIP(searchModel);
            GridSIPTransactions.Visible = true;
            GridSIPTransactions.DataSource = transactions;
            GridSIPTransactions.DataBind();
        }

        protected void btnSearchtrn_Click(object sender, EventArgs e)
        {
            SipMasterModel searchModel = new SipMasterModel
            {
                TranCode = string.IsNullOrEmpty(tarnCode.Text) ? (string)null : tarnCode.Text,
            };

            DataTable transactions = new WM.Controllers.sip_master_reconciliationController().GetBranchName(searchModel);
            tranCodeGrid.DataSource = transactions;
            tranCodeGrid.DataBind();
        }

        private decimal amrtaparsed
        {
            get { return (decimal)(ViewState["amrtaparsed"] ?? 0); }
            set { ViewState["amrtaparsed"] = value; }
        }

        private string tranCoderta
        {
            get { return ViewState["tranCoderta"] as string ?? string.Empty; }
            set { ViewState["tranCoderta"] = value; }
        }


        protected void btnsiprerta_Click(object sender, EventArgs e)
        {
            try
            {

                string loginId = Session["LoginId"]?.ToString();

                string rtaSearchTrCodeValueNew = rtaSearchTrCodeValue1;
                string rtaRowDataRtaCodeNew = rtaRowDataRtaCode;
                string rtaRowDataAmountNew = rtaRowDataAmount;




                if (string.IsNullOrEmpty(rtaSearchTrCodeValueNew) || string.IsNullOrEmpty(rtaRowDataRtaCodeNew) || amrtaparsed <= 0)
                {
                    pc.ShowAlert(this, "Please select a transaction to reconcile.");
                    reconcileBtn.Focus();
                    return;
                }
                //string result = new sip_master_reconciliationController().ReconcileTransactions(tranCodetra, amrtaparsed, tranCoderta , loginId);
                string result = new sip_master_reconciliationController().ReconcileTransactions(rtaSearchTrCodeValueNew, PsmController.ParseNullableDecimalNE(rtaRowDataAmountNew), rtaRowDataRtaCodeNew, loginId);


                pc.ShowAlert(this, result);

                //ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", $"alert('{"result"}');", true);
                reconcileBtn.Focus();
                return;
            }
            catch (Exception ex)
            {
                pc.ShowAlert(this, "Error: " + ex.Message);
                reconcileBtn.Focus();
                return;
            }
        }

        #endregion

        #region BTN SET REMARK CLICK
        protected void CmdSaveRemark_Click(object sender, EventArgs e)
        {
            try
            {
                string selectedTrCode = rtaSearchTrCodeValue1;
                string enteredRemark = rtaSearchRemarkPrevValue1?.Trim();
                if (string.IsNullOrEmpty(selectedTrCode) || string.IsNullOrEmpty(enteredRemark))
                {
                    pc.ShowAlert(this, "Please select a transaction and provide a remark before saving.");
                    remark.Focus();
                    return;
                }
                var controller = new sip_master_reconciliationController();
                controller.UpdateRemarkReco(selectedTrCode, enteredRemark);

                // bind the dt with erro handling
                // set agaitn the store field valeu to the same fiels
                dateFromRta.Text = rtaSearchFromdtPrevValue1;
                dateToRta.Text = rtaSearchTodtPrevValue1;
                amcSelectrta.SelectedValue = rtaSearchAMCPrevValue1;
                branchSelectrta.SelectedValue = rtaSearchBranchPrevValue1;
                chequeNo.Text = rtaSearchChequeNoPrevValue1;
                txtInvestorName.Text = rtaSearchInvestorNamePrevValue1;
                txtAmount.Text = rtaSearchAmountPrevValue1;
                remark.Text = rtaSearchRemarkPrevValue1;
                RadioButton1.Checked = rtaSearchRecoStatusPrevValue1 == "Y";
                RadioButtonList1.SelectedValue = rtaSearchTranTypePrevValue1; // Assuming this is the correct field for transaction type
                // trantype release





                pc.ShowAlert(this, "The record has been remarked successfully.");
            }
            catch (Exception ex)
            {
                pc.ShowAlert(this, $"Error while saving remark: {ex.Message}");
                return;
            }
            //finally
            //{
            //    remark.Focus();
            //}
        }


        #endregion
    }
}




