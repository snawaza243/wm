CREATE OR REPLACE PROCEDURE WEALTHMAKER.PSM_MC_UNRECONCILE2 (
    P_TRAN_CODE     IN  VARCHAR2,
    P_RTA_TRAN_CODE IN  VARCHAR2,
    P_CURSOR        OUT SYS_REFCURSOR
)
AS
    V_ERROR_MSG VARCHAR2(4000);
    V_RTA_TRAN_CODE VARCHAR(4000);
    V_COUNT1    NUMBER;
    V_COUNT2    NUMBER;
    V_COUNT3    NUMBER;
BEGIN

    V_RTA_TRAN_CODE := REPLACE(P_RTA_TRAN_CODE, '''', '');
    
    SAVEPOINT START_TRANSACTION;

    IF P_TRAN_CODE IS NOT NULL AND P_RTA_TRAN_CODE IS NOT NULL THEN
        
        -- First update: by TRAN_CODE
        UPDATE TRANSACTION_MF_TEMP1
        SET REMARK_RECO = NULL,
            PROCESSED   = NULL,
            AMOUNT      = ORIG_AMOUNT,
            REC_FLAG    = NULL,
            RECO_DATE   = NULL,
            REC_USER    = NULL,
            RTA_TRAN_CODE = NULL
        WHERE TRAN_CODE = P_TRAN_CODE;
        
        V_COUNT1 := SQL%ROWCOUNT;
                

        -- Second update: by BASE_TRAN_CODE
        UPDATE TRANSACTION_MF_TEMP1
        SET REMARK_RECO = NULL,
            PROCESSED   = NULL,
            AMOUNT      = ORIG_AMOUNT,
            REC_FLAG    = NULL,
            RECO_DATE   = NULL,
            REC_USER    = NULL,
            RTA_TRAN_CODE = NULL
        WHERE BASE_TRAN_CODE = P_TRAN_CODE;
        V_COUNT2 := SQL%ROWCOUNT;
        
        
        -- Third update: remote table 
        V_COUNT3 :=0;       
        FOR code IN (
            SELECT REGEXP_SUBSTR(V_RTA_TRAN_CODE, '[^,]+', 1, LEVEL) AS TRAN_CODE
            FROM dual
            CONNECT BY REGEXP_SUBSTR(V_RTA_TRAN_CODE, '[^,]+', 1, LEVEL) IS NOT NULL
        )
        LOOP
            UPDATE transaction_st@MF.BAJAJCAPITAL
            SET REC_FLAG = NULL,
            HO_TRAN_CODE = NULL
            WHERE TRAN_CODE = code.TRAN_CODE;
            V_COUNT3 := V_COUNT3 + 1;
        END LOOP;        
        --V_COUNT3 := SQL%ROWCOUNT;        
        COMMIT;

        OPEN P_CURSOR FOR
        --SELECT 'SUCCESS: Transaction unreconcile successfully with part 1: ' || V_COUNT1 || ', part2: '|| V_COUNT2 || ', part 3' || V_COUNT3 AS MESSAGE
        SELECT 'SUCCESS: Transaction unreconcile successfully' AS MESSAGE        
        FROM DUAL;

    ELSE
        OPEN P_CURSOR FOR
        SELECT 'ERROR: AR not available' AS MESSAGE
        FROM DUAL;
        RETURN;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK TO START_TRANSACTION;
        V_ERROR_MSG := SQLERRM;
        OPEN P_CURSOR FOR
        SELECT 'ERROR: ' || V_ERROR_MSG AS MESSAGE
        FROM DUAL;
END;
/
