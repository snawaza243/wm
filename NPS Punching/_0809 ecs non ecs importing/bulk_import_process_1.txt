CREATE OR REPLACE PROCEDURE WEALTHMAKER.PSM_NPS_ECS_BULK_IMP(
    P_IMP_TYPE  IN VARCHAR2,
    P_ZERO_COMM IN VARCHAR2,
    P_LOG_ID    IN VARCHAR2,
    P_ROLE_ID   IN VARCHAR2,
    P_COMPANY   IN VARCHAR2,
    P_STATUS    IN VARCHAR2,    
    P_OUT       OUT SYS_REFCURSOR,
    P_EXCEL     OUT SYS_REFCURSOR
) AS
    V_QUERY       VARCHAR2(4000);
    V_RETURN_MSG  VARCHAR2(100);
    V_COUNT       NUMBER;
    V_GEN_COUNT   NUMBER := 0;
    V_TOTAL_RECS  NUMBER := 0;
BEGIN
    -- Start transaction explicitly
    SET TRANSACTION NAME 'NPS_BULK_IMPORT';
    
    IF P_IMP_TYPE = 'NON_ECS' THEN  
        -- Clean temporary tables
        PSM_NPS_NES_TEMP_CLEAN;
      
        -- Backup existing data
        INSERT /*+ APPEND */ INTO NPS_NONECS_TBL_IMP_BK 
        SELECT * FROM NPS_NONECS_TBL_IMP;
        COMMIT;
        
        -- Clear import table
        EXECUTE IMMEDIATE 'TRUNCATE TABLE NPS_NONECS_TBL_IMP';
        
        -- Import new data with proper data type conversion
        INSERT /*+ APPEND */ INTO NPS_NONECS_TBL_IMP (
            REF_TRAN_CODE, TR_DATE, ECS_AMT, ECS_PERIOD, ECS_PAY_DT, 
            ECS_TRAN_CODE, LOGGEDUSERID, TIMEST, MODIFY_USER, MODIFY_DATE, 
            TPSL_TRANID, CONSUMER_CODE, IMPORT_DT
        ) SELECT 
            REF_TRAN_CODE, TO_DATE(TR_DATE, 'DD-MON-YYYY'), TO_NUMBER(ECS_AMT), ECS_PERIOD, 
            TO_DATE(ECS_PAY_DT, 'DD-MON-YYYY'), ECS_TRAN_CODE, P_LOG_ID, 
            TO_DATE(TIMEST, 'DD-MON-YYYY'), NULL, NULL, 
            TPSL_TRANID, CONSUMER_CODE, TO_DATE(IMPORT_DT, 'DD-MON-YYYY') 
          FROM PSM_NPS_NES_TBL_TEMP1;
        
        V_COUNT := SQL%ROWCOUNT;
        V_TOTAL_RECS := V_COUNT;

        -- Process each record
        FOR rec IN (
            SELECT REF_TRAN_CODE, TR_DATE, ECS_AMT, CONSUMER_CODE
            FROM NPS_NONECS_TBL_IMP
            WHERE REF_TRAN_CODE IS NOT NULL
        ) LOOP
            DECLARE
                v_count_tr NUMBER;
            BEGIN
                -- Check if transaction exists
                SELECT COUNT(*)
                INTO v_count_tr
                FROM TRANSACTION_ST
                WHERE MANUAL_ARNO = rec.REF_TRAN_CODE
                AND TRUNC(TR_DATE) = TRUNC(rec.TR_DATE);

                -- Generate transaction if not exists
                IF v_count_tr = 0 THEN
                    NPS_NONECSTRAN_GENERATE_IMP(
                        CONSUMERCODE => rec.CONSUMER_CODE,
                        PFLAG       => P_ZERO_COMM
                    );
                    V_GEN_COUNT := V_GEN_COUNT + 1;
                ELSE
                    -- Mark duplicate in temp table
                    UPDATE PSM_NPS_NES_TBL_TEMP1
                    SET REMARK = 'Already Exists'
                    WHERE TRIM(CONSUMER_CODE) = TRIM(rec.CONSUMER_CODE)
                    AND TRIM(REF_TRAN_CODE) = TRIM(rec.REF_TRAN_CODE);
                END IF;
            END;
        END LOOP;
        
        V_RETURN_MSG := 'SUCCESS: NONECS Data Importing ' || V_GEN_COUNT || ' of ' || V_TOTAL_RECS || 
                       ' records processed. ' || (V_TOTAL_RECS - V_GEN_COUNT) || 
                       ' already exist.';

    ELSIF P_IMP_TYPE = 'ECS' THEN
        -- Clean temporary tables
        PSM_NPS_NES_TEMP_CLEAN;
        
        -- Backup existing data
        INSERT /*+ APPEND */ INTO NPS_ECS_TBL_IMP_BK 
        SELECT * FROM NPS_ECS_TBL_IMP;
        COMMIT;
        
        -- Clear import table
        EXECUTE IMMEDIATE 'TRUNCATE TABLE NPS_ECS_TBL_IMP';
        
        -- Import new data with proper data type conversion
        INSERT /*+ APPEND */ INTO NPS_ECS_TBL_IMP (
            REF_TRAN_CODE, TR_DATE, ECS_AMT, ECS_PERIOD, ECS_PAY_DT, 
            ECS_TRAN_CODE, LOGGEDUSERID, TIMEST, MODIFY_USER, 
            MODIFY_DATE, TPSL_TRANID, CONSUMER_CODE, IMPORT_DT
        ) SELECT 
            REF_TRAN_CODE, TO_DATE(TR_DATE, 'DD-MON-YYYY'), TO_NUMBER(ECS_AMT), ECS_PERIOD, 
            TO_DATE(ECS_PAY_DT, 'DD-MON-YYYY'), ECS_TRAN_CODE, P_LOG_ID,  
            TO_DATE(TIMEST, 'DD-MON-YYYY'), NULL, NULL, 
            TPSL_TRANID, CONSUMER_CODE, TO_DATE(IMPORT_DT, 'DD-MON-YYYY') 
          FROM PSM_NPS_NES_TBL_TEMP2 
          WHERE REF_TRAN_CODE IS NOT NULL;
        
        V_COUNT := SQL%ROWCOUNT;
        V_TOTAL_RECS := V_COUNT;

        -- Process each record
        FOR rec IN (
            SELECT REF_TRAN_CODE, TR_DATE, ECS_AMT, CONSUMER_CODE
            FROM NPS_ECS_TBL_IMP
            WHERE REF_TRAN_CODE IS NOT NULL
        ) LOOP
            DECLARE
                v_count_tr NUMBER;
            BEGIN
                -- Check if transaction exists
                SELECT COUNT(*)
                INTO v_count_tr
                FROM TRANSACTION_ST
                WHERE MANUAL_ARNO = rec.REF_TRAN_CODE
                AND TRUNC(TR_DATE) = TRUNC(rec.TR_DATE);

                -- Generate transaction if not exists
                IF v_count_tr = 0 THEN
                    NPS_ECSTRAN_GENERATE_IMP(rec.CONSUMER_CODE);
                    V_GEN_COUNT := V_GEN_COUNT + 1;
                ELSE
                    -- Mark duplicate in temp table
                    UPDATE PSM_NPS_NES_TBL_TEMP2
                    SET REMARK = 'Already Exists'
                    WHERE TRIM(CONSUMER_CODE) = TRIM(rec.CONSUMER_CODE)
                    AND TRIM(REF_TRAN_CODE) = TRIM(rec.REF_TRAN_CODE);
                END IF;
            END;
        END LOOP;
        
        V_RETURN_MSG := 'SUCCESS: ECS Importing ' || V_GEN_COUNT || ' of ' || V_TOTAL_RECS || 
                       ' records processed. ' || (V_TOTAL_RECS - V_GEN_COUNT) || 
                       ' already exist.';
    END IF;

    -- Set output cursors
    IF P_IMP_TYPE = 'NON_ECS' THEN
        OPEN P_EXCEL FOR SELECT * FROM PSM_NPS_NES_TBL_TEMP1;
    ELSE
        OPEN P_EXCEL FOR SELECT * FROM PSM_NPS_NES_TBL_TEMP2;
    END IF;
    
    OPEN P_OUT FOR SELECT V_RETURN_MSG AS MESSAGE FROM DUAL;
    COMMIT;
    
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        V_RETURN_MSG := 'ERROR: ' || SUBSTR(SQLERRM, 1, 200);
        OPEN P_OUT FOR SELECT V_RETURN_MSG AS MESSAGE FROM DUAL;
        OPEN P_EXCEL FOR SELECT NULL AS EMPTY FROM DUAL WHERE 1=0;
END;
/