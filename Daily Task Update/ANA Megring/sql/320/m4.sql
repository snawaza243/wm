CREATE OR REPLACE PROCEDURE PSM_ANA_MERGE2(
    P_MSFGMAIN_CODE         IN VARCHAR2,
    P_MSFGMERGEDINVESTORS   IN TABLE_OF_VARCHAR2
) AS
    V_NEW_INV_CODE          VARCHAR2(50);
    V_MCOUNT                NUMBER := 0;
    V_FLAG                  BOOLEAN := TRUE;
    V_BRANCH_CD             VARCHAR2(50);
    V_RM_CD                 VARCHAR2(50);
    V_FAM_HEAD              VARCHAR2(50);
    V_MEMBERS1              VARCHAR2(50);
    V_MEMBERS2              VARCHAR2(50);
    V_MEMBERS3              VARCHAR2(50);

    MEMBERS                 VARCHAR2(100);
    FAM_HEAD                VARCHAR2(100);


BEGIN
    -- Initialize variables
    V_BRANCH_CD := '';
    V_RM_CD := '';
    
    -- Begin transaction
    BEGIN
        -- Loop through each merged investor code
        FOR I IN 1..P_MSFGMERGEDINVESTORS.COUNT LOOP
            -- Find RM and Branch Code (Assuming this is done by a function)
            -- Find_RM(v_branch_cd, v_Rm_cd);
            
            -- Process each investor
            FOR REC IN (SELECT INV_CODE, INVESTOR_NAME FROM INVESTOR_MASTER WHERE SOURCE_ID = P_MSFGMERGEDINVESTORS(I)) LOOP
                
                -- Check if investor exists in the main code
                BEGIN
                    SELECT INV_CODE INTO V_NEW_INV_CODE FROM INVESTOR_MASTER WHERE SOURCE_ID = P_MSFGMAIN_CODE AND UPPER(REPLACE(REPLACE(INVESTOR_NAME, '.', ''), ' ', '')) LIKE '%' || UPPER(REPLACE(REPLACE(REC.INVESTOR_NAME, '.', ''), ' ', '')) || '%' AND INSTR(UPPER(INVESTOR_NAME), 'HUF') = 0;
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        V_MCOUNT := V_MCOUNT + 1;
                        IF V_MCOUNT >= 999 THEN
                            V_NEW_INV_CODE := P_MSFGMAIN_CODE || LPAD(V_MCOUNT, 5, '0');
                        ELSE
                            V_NEW_INV_CODE := P_MSFGMAIN_CODE || LPAD(V_MCOUNT, 3, '0');
                        END IF;
                        
                        -- Update investor_master
                        UPDATE INVESTOR_MASTER SET SOURCE_ID = P_MSFGMAIN_CODE, BRANCH_CODE = V_BRANCH_CD, RM_CODE = V_RM_CD, INV_CODE = V_NEW_INV_CODE WHERE INV_CODE = REC.INV_CODE;
                END;
                
                -- Update related tables
                UPDATE FP_INVESTOR SET FAMILYHEAD_CODE = V_NEW_INV_CODE WHERE FAMILYHEAD_CODE = REC.INV_CODE;
                UPDATE FP_INVESTOR SET FAM_MEM1 = REPLACE(FAM_MEM1, REC.INV_CODE, V_NEW_INV_CODE) WHERE FAMILYHEAD_CODE LIKE SUBSTR(REC.INV_CODE, 1, 8) || '%' OR FAMILYHEAD_CODE LIKE SUBSTR(V_NEW_INV_CODE, 1, 8) || '%';
                UPDATE FP_INVESTOR SET FAM_MEM2 = REPLACE(FAM_MEM2, REC.INV_CODE, V_NEW_INV_CODE) WHERE FAMILYHEAD_CODE LIKE SUBSTR(REC.INV_CODE, 1, 8) || '%' OR FAMILYHEAD_CODE LIKE SUBSTR(V_NEW_INV_CODE, 1, 8) || '%';
                UPDATE FP_INVESTOR SET FAM_MEM3 = REPLACE(FAM_MEM3, REC.INV_CODE, V_NEW_INV_CODE) WHERE FAMILYHEAD_CODE LIKE SUBSTR(REC.INV_CODE, 1, 8) || '%' OR FAMILYHEAD_CODE LIKE SUBSTR(V_NEW_INV_CODE, 1, 8) || '%';
                
                -- Update transaction tables
                UPDATE TRANSACTION_ST SET CLIENT_CODE = V_NEW_INV_CODE, BRANCH_CODE = V_BRANCH_CD, SOURCE_CODE = P_MSFGMAIN_CODE, RMCODE = V_RM_CD, MODIFY_TALISMA = SYSDATE WHERE CLIENT_CODE = REC.INV_CODE;
                UPDATE TRANSACTION_MF_TEMP1 SET CLIENT_CODE = V_NEW_INV_CODE, BRANCH_CODE = V_BRANCH_CD, SOURCE_CODE = P_MSFGMAIN_CODE, RMCODE = V_RM_CD WHERE CLIENT_CODE = REC.INV_CODE;
                UPDATE TRANSACTION_ST@MF.BAJAJCAPITAL SET CLIENT_CODE = V_NEW_INV_CODE, BRANCH_CODE = V_BRANCH_CD, SOURCE_CODE = P_MSFGMAIN_CODE, RMCODE = V_RM_CD WHERE CLIENT_CODE = REC.INV_CODE;
                UPDATE TRANSACTION_STTEMP SET CLIENT_CODE = V_NEW_INV_CODE, BRANCH_CODE = V_BRANCH_CD, SOURCE_CODE = P_MSFGMAIN_CODE, RMCODE = V_RM_CD, MODIFY_TALISMA = SYSDATE WHERE CLIENT_CODE = REC.INV_CODE;
                UPDATE REDEM@MF.BAJAJCAPITAL SET CLIENT_CODE = V_NEW_INV_CODE, BRANCH_CODE = V_BRANCH_CD, SOURCE_CODE = P_MSFGMAIN_CODE, RMCODE = V_RM_CD WHERE CLIENT_CODE = REC.INV_CODE;
                UPDATE INVESTOR_FOLIO@MF.BAJAJCAPITAL SET INVESTOR_CODE = V_NEW_INV_CODE WHERE INVESTOR_CODE = REC.INV_CODE;
                UPDATE INVESTOR_MASTER_IPO SET INV_CODE = V_NEW_INV_CODE, AGENT_CODE = P_MSFGMAIN_CODE  WHERE INV_CODE = REC.INV_CODE;
                UPDATE REVERTAL_TRANSACTION SET CLIENT_CODE = V_NEW_INV_CODE, BRANCH_CODE = V_BRANCH_CD, SOURCE_CODE = P_MSFGMAIN_CODE, RMCODE = V_RM_CD WHERE CLIENT_CODE = REC.INV_CODE;
                UPDATE TRANSACTION_IPO SET INV_CODE = V_NEW_INV_CODE, AGENT_CODE = P_MSFGMAIN_CODE WHERE INV_CODE = REC.INV_CODE;
                UPDATE TRAN_PAYOUT@MF.BAJAJCAPITAL SET INV_CODE = V_NEW_INV_CODE WHERE INV_CODE = REC.INV_CODE;
                UPDATE BAJAJ_AR_HEAD SET CLIENT_CODE = V_NEW_INV_CODE, MODIFY_TALISMA = SYSDATE WHERE CLIENT_CODE = REC.INV_CODE;
                UPDATE TRAN_NET_BALANCE6@MF.BAJAJCAPITAL SET CLIENT_CODE = V_NEW_INV_CODE  WHERE CLIENT_CODE = REC.INV_CODE;
                UPDATE TRAN_IPO SET INV_CODE = V_NEW_INV_CODE, CLIENT_CODE= P_MSFGMAIN_CODE WHERE INV_CODE = REC.INV_CODE;
                UPDATE TRAN_LEAD SET INV_CODE = V_NEW_INV_CODE  WHERE INV_CODE = REC.INV_CODE;
                UPDATE LEADS.LEAD_DETAIL SET INV_CODE = V_NEW_INV_CODE  WHERE INV_CODE = REC.INV_CODE;
                UPDATE PORT_TRANSACTION_ST@MF.BAJAJCAPITAL SET CLIENT_CODE = V_NEW_INV_CODE, BRANCH_CODE = V_BRANCH_CD, SOURCE_CODE = P_MSFGMAIN_CODE, RMCODE = V_RM_CD WHERE CLIENT_CODE = REC.INV_CODE;
                UPDATE ONLINE_TRANSACTION_ST SET CLIENT_CODE = V_NEW_INV_CODE, BRANCH_CODE = V_BRANCH_CD, SOURCE_CODE = P_MSFGMAIN_CODE, RMCODE = V_RM_CD WHERE CLIENT_CODE = REC.INV_CODE;

                
                -- Insert into history table
                INSERT INTO INV_DEL_HIST_AGENT_MERGE (INV_CODE, NEW_INV_CODE, UPDATEON, UPDATEDBY) VALUES (REC.INV_CODE, V_NEW_INV_CODE, SYSDATE, USER);
                
                --Online Just Trade
                UPDATE TRANSACTION_ST_ONLINE    SET CLIENT_CODE=V_NEW_INV_CODE      WHERE CLIENT_CODE=REC.INV_CODE;
                UPDATE ONLINE_CLIENT_REQUEST    SET INV_CODE=V_NEW_INV_CODE         WHERE INV_CODE=REC.INV_CODE;
                UPDATE ONLINE_CLIENT_REQUEST_HIST  SET INV_CODE=V_NEW_INV_CODE      WHERE INV_CODE=REC.INV_CODE;
                UPDATE ONLINE_BUSINESS_SUMMARY  SET CLIENT_CODEWM=V_NEW_INV_CODE    WHERE CLIENT_CODEWM=REC.INV_CODE;
                UPDATE OFFLINE_BUSINESS_SUMMARY SET CLIENT_CODEWM=V_NEW_INV_CODE    WHERE CLIENT_CODEWM=REC.INV_CODE;

                -- Delete old records if necessary
                IF V_NEW_INV_CODE IS NOT NULL THEN
                    INSERT INTO CLIENT_INV_MERGE_LOG VALUES (V_NEW_INV_CODE, REC.INV_CODE, USER, SYSDATE);
                    INSERT INTO INVESTOR_DEL SELECT * FROM INVESTOR_MASTER  WHERE INV_CODE = REC.INV_CODE;
                    DELETE FROM INVESTOR_MASTER WHERE INV_CODE = REC.INV_CODE;
                    DELETE FROM INVESTOR_MASTER@MF.BAJAJCAPITAL WHERE INV_CODE = REC.INV_CODE;
                END IF;
            END LOOP;
            
            UPDATE INVESTOR_MASTER SET  BRANCH_CODE = V_BRANCH_CD, RM_CODE = V_RM_CD, MODIFY_DATE = SYSDATE WHERE SOURCE_ID = P_MSFGMAIN_CODE;
            UPDATE AGENT_MASTER SET SOURCEID = V_BRANCH_CD, RM_CODE = V_RM_CD, MODIFY_DATE = SYSDATE WHERE AGENT_CODE = P_MSFGMAIN_CODE;
            UPDATE TRANSACTION_ST            SET   BRANCH_CODE= V_BRANCH_CD ,RMCODE= V_RM_CD, MODIFY_TALISMA= SYSDATE WHERE SOURCE_CODE = P_MSFGMAIN_CODE;
            UPDATE TRANSACTION_MF_TEMP1      SET   BRANCH_CODE= V_BRANCH_CD ,RMCODE= V_RM_CD  WHERE SOURCE_CODE = P_MSFGMAIN_CODE;
            UPDATE TRANSACTION_ST@MF.BAJAJCAPITAL            SET   BRANCH_CODE=V_BRANCH_CD, RMCODE = V_RM_CD WHERE SOURCE_CODE = P_MSFGMAIN_CODE;
            UPDATE PORT_TRANSACTION_ST@MF.BAJAJCAPITAL            SET   BRANCH_CODE=V_BRANCH_CD, RMCODE=V_RM_CD WHERE SOURCE_CODE=P_MSFGMAIN_CODE;
            UPDATE TRANSACTION_STTEMP        SET   BRANCH_CODE=V_BRANCH_CD, RMCODE=V_RM_CD, MODIFY_TALISMA=SYSDATE WHERE SOURCE_CODE = P_MSFGMAIN_CODE;
            UPDATE REDEM                     SET   BRANCH_CODE=V_BRANCH_CD, RMCODE=V_RM_CD  WHERE SOURCE_CODE = P_MSFGMAIN_CODE;
         

            UPDATE PAYMENT_DETAIL            SET AGENT_CODE = P_MSFGMAIN_CODE WHERE AGENT_CODE=P_MSFGMERGEDINVESTORS(I);
            UPDATE LEDGER                    SET AGENT_CODE = P_MSFGMAIN_CODE WHERE AGENT_CODE=P_MSFGMERGEDINVESTORS(I);
            

            -- By Vinay Hatwal
            UPDATE UPFRONT_PAID SET CLIENT_AGENT_CODE=P_MSFGMAIN_CODE WHERE CLIENT_AGENT_CODE=P_MSFGMERGEDINVESTORS(I);
            UPDATE ADD_INCENTIVE_PAID SET CLIENT_AGENT_CODE=P_MSFGMAIN_CODE WHERE CLIENT_AGENT_CODE=P_MSFGMERGEDINVESTORS(I);
            UPDATE SIP_BROKER_BILLING1 SET SOURCE_CODE=P_MSFGMAIN_CODE WHERE SOURCE_CODE=P_MSFGMERGEDINVESTORS(I);
            UPDATE STP_BROKER_BILLING1 SET SOURCE_CODE=P_MSFGMAIN_CODE WHERE SOURCE_CODE=P_MSFGMERGEDINVESTORS(I);
            
            
            UPDATE ADVISORSUBENTRY SET ANACODE=P_MSFGMAIN_CODE WHERE ANACODE=P_MSFGMERGEDINVESTORS(I);
            
            FOR RSCLIENT IN (SELECT * FROM AGENT_MASTER WHERE AGENT_CODE = P_MSFGMAIN_CODE) LOOP
                FOR RSCLIENT1 IN (SELECT * FROM AGENT_MASTER WHERE AGENT_CODE=P_MSFGMERGEDINVESTORS(I)) LOOP

                IF RSCLIENT.PHONE IS NULL OR RSCLIENT.PHONE = '' AND RSCLIENT1.PHONE IS NOT NULL THEN
                    RSCLIENT.PHONE = RSCLIENT1.PHONE
                END IF ;

                IF RSCLIENT.EMAIL IS NULL   AND RSCLIENT1.EMAIL IS NOT NULL THEN
                    RSCLIENT.EMAIL = RSCLIENT1.EMAIL
                END IF ;

                IF RSCLIENT.MOBILE IS NULL AND RSCLIENT1.MOBILE IS NOT NULL THEN
                    RSCLIENT.MOBILE = RSCLIENT1.MOBILE
                END IF;

                IF RSCLIENT.PINCODE IS NULL AND RSCLIENT1.PINCODE  IS NOT NULL THEN
                RSCLIENT.PINCODE = RSCLIENT1.PINCODE
                END IF
                
                IF RSCLIENT.CITY_ID IS NULL AND RSCLIENT1.CITY_ID  IS NOT NULL THEN
                    RSCLIENT.CITY_ID = RSCLIENT1.CITY_ID
                END IF
                IF RSCLIENT.DOB IS NULL AND RSCLIENT1.DOB  IS NOT NULL THEN
                    RSCLIENT.DOB = RSCLIENT1.DOB
                END IF
                
                IF RSCLIENT.EXIST_CODE IS NULL AND RSCLIENT1.EXIST_CODE  IS NOT NULL THEN
                    RSCLIENT.EXIST_CODE = RSCLIENT1.EXIST_CODE
                END IF

                IF RSCLIENT.TDS IS NULL AND RSCLIENT1.TDS  IS NOT NULL THEN
                    RSCLIENT.TDS = RSCLIENT1.TDS
                END IF
                IF RSCLIENT.INTRODUCER IS NULL AND RSCLIENT1.INTRODUCER  IS NOT NULL THEN
                    RSCLIENT.INTRODUCER = RSCLIENT1.INTRODUCER
                END IF
                
                IF RSCLIENT1.JOININGDATE IS NOT NULL THEN
                    -- If CheckDate(Format(rsClient.JOININGDATE, "dd/mm/yyyy, Format(rsclient1.JOININGDATE, "dd/mm/yyyy) = False Then
                        RSCLIENT.JOININGDATE = RSCLIENT1.CREATION_DATE
                    -- End If
                END IF
                
                IF RSCLIENT.JOININGDATE IS NULL AND RSCLIENT1.JOININGDATE  IS NOT NULL THEN
                    RSCLIENT.JOININGDATE = RSCLIENT1.JOININGDATE
                END IF
                
                IF RSCLIENT1.LAST_TRAN_DT1  IS NOT NULL THEN
                    -- If CheckDate(Format(rsclient1.LAST_TRAN_DT1, "dd/mm/yyyy, Format(rsClient.LAST_TRAN_DT1, "dd/mm/yyyy) = False Then
                        RSCLIENT.LAST_TRAN_DT1 = RSCLIENT1.LAST_TRAN_DT1
                    -- End If
                END IF
                
                IF RSCLIENT.LAST_TRAN_DT1 IS NULL AND RSCLIENT1.LAST_TRAN_DT1  IS NOT NULL THEN
                    RSCLIENT.LAST_TRAN_DT1 = RSCLIENT1.LAST_TRAN_DT1
                END IF

                END LOOP
            END LOOP


            INSERT INTO CLIENT_INV_MERGE_LOG VALUES(P_MSFGMAIN_CODE,P_MSFGMERGEDINVESTORS(I),GLBLOGINID,SYSDATE);
            INSERT INTO AGENT_DEL SELECT * FROM AGENT_MASTER WHERE AGENT_CODE=P_MSFGMERGEDINVESTORS(I);
            DELETE FROM AGENT_MASTER WHERE AGENT_CODE = P_MSFGMERGEDINVESTORS(I);
            DELETE FROM AGENT_MASTER@MF.BAJAJCAPITAL WHERE AGENT_CODE=P_MSFGMERGEDINVESTORS(I);
             
            -- Insert into history table
            INSERT INTO AGENT_DEL_HIST_AGENT_MERGE (AGENT_CODE, NEW_AGENT_CODE, UPDATEON, UPDATEDBY)
            VALUES (P_MSFGMERGEDINVESTORS(I), P_MSFGMAIN_CODE, SYSDATE, GLBLOGINID);
        

            SELECT NVL(FAMILYHEAD_CODE, NULL), NVL(FAM_MEM1, NULL ) INTO FAM_HEAD, MEMBERS1
            FROM FP_INVESTOR WHERE SUBSTR(FAMILYHEAD_CODE,1,8)= P_MSFGMAIN_CODE AND (FP_TYPE='Snapshot' OR FP_TYPE='Comprehensive') ORDER BY FAMILYHEAD_CODE DESC;

            IF FAM_HEAD IS NOT NULL AND MEMBERS1 IS NOT NULL THEN 
                INSERT INTO DUP_FP_INVESTOR SELECT * FROM FP_INVESTOR WHERE FAMILYHEAD_CODE= FAM_HEAD
                UPDATE FP_INVESTOR SET FAM_MEM1=FAM_MEM1||'#'||MEMBERS1 
                WHERE SUBSTR(FAMILYHEAD_CODE,1,8)=P_MSFGMAIN_CODE AND (FP_TYPE='Snapshot' OR FP_TYPE='Comprehensive');
        
        END LOOP;
        
        -- Commit transaction
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            -- Rollback transaction on error
            ROLLBACK;
            RAISE_APPLICATION_ERROR(-20001, 'Error occurred: ' || SQLERRM);
    END;
END PSM_ANA_MERGE2;
/